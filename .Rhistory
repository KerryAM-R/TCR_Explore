pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B4_D07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
length(hetcalls@secondarySeq)[1]
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B7_E07.ab1")
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B7_E07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.25)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.5)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-C3_H07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
inFile.seq <- input$file1_seq.file
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
showtext_auto()
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
font_add_google("Press Start 2P", "Game")
showtext_auto()
font <- as.data.frame(font_families())
font
showtext_auto()
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df <- read.csv("~/Desktop/Allopurinol/100123 Supplementary Table 1.csv")
df <- as.data.frame(df)
names(df)
df <- as.data.frame(df)
names(df)
df <- df[names(df) %in% c("cloneCount","Drug.Group","AA.JUNCTION_B","AVJ")]
df.names <-  df[ , -which(names(df) %in% c("cloneCount"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep("AA.JUNCTION_B",names(df1))])
df1$chain <- df1[,names(df1) %in% "AVJ"]
df1 <- df1[order(df1$chain, decreasing = F),]
df1$chain <- factor(df1$chain,levels = unique(df1$chain))
df.col.2 <- as.data.frame(hist.col.table())
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
dataframe = read.csv("test-data/Index/ID.780_colouring column2022.12.29.csv",header = T)
head(dataframe)
ggplot(dataframe, aes(x = tcr.beta.APC.Cy7, y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
## volcano plots
require("markdown")
require("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack") # pcm2pfm function
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
library("ggseqlogo") # motif plot
library("sangerseqR")
require("scales")
require("umap")
require("fpc")
require("fossil")
ggplot(dataframe, aes(x = tcr.beta.APC.Cy7, y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
library(ggridges)
ggplot(dataframe, aes(x = tcr.beta.APC.Cy7, y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = c(tcr.beta.APC.Cy7), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
head(dataframe)
ggplot(dataframe, aes(x = c(CD62L.bv605,), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = c(tcr.beta.APC.Cy7,CD62L.bv605), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = c(CD62L.bv605), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = log1o(CD62L.bv605), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = log10(CD62L.bv605), y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
head(dataframe)
ggplot(dataframe, aes(x = log10(CD62L.bv605), y = gene.CDR3.1, fill = gene.CDR3.1)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = log10(CD62L.bv605), y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
head(dataframe)
source("~/.active-rstudio-document", echo=TRUE)
ggplot(dataframe, aes(x = log10(Tetramer.2.PE), y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
ggplot(dataframe, aes(x = Tetramer.2.PE, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none")
dataframe$selected <- log10(dataframe$Tetramer.2.PE)
ggplot(dataframe, aes(x = log10(Tetramer.2.PE), y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())
ggplot(dataframe, aes(x = log10(Tetramer.2.PE), y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
dataframe$selected <- log10(dataframe$Tetramer.2.PE)
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
theme(axis.title = "Tetramer.2.PE")
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
theme(title =  = "Tetramer.2.PE")
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
theme(title = "Tetramer.2.PE")
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())
ggplot(dataframe, aes(x = selected, y = gene.CDR3.2, fill = gene.CDR3.2)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
labs(title="Tetramer.2.PE")
aov(selected ~ gene.CDR3.2,data = dataframe)
TukeyHSD( aov(selected ~ gene.CDR3.2,data = dataframe))
TukeyHSD( aov(selected ~ gene.CDR3.2,data = dataframe))[1]
tab <-TukeyHSD( aov(selected ~ gene.CDR3.2,data = dataframe))[1]
head(tab)
tab$stat <- ifelse(tab$`p adj`<0.0001,"****",
ifelse(tab$`p adj`<0.001,"***",
ifelse(tab$`p adj`<0.01,"**",
ifelse(tab$`p adj`<0.05,"*","NS"
))))
tab <-TukeyHSD( aov(selected ~ gene.CDR3.2,data = dataframe))[1]
names(tab) <- c("diff" ,"lwr","upr","p.adj")
tab$stat <- ifelse(tab$`p adj`<0.0001,"****",
ifelse(tab$`p adj`<0.001,"***",
ifelse(tab$`p adj`<0.01,"**",
ifelse(tab$`p adj`<0.05,"*","NS"
))))
tab <-as.data.frame(TukeyHSD( aov(selected ~ gene.CDR3.2,data = dataframe))[1])
names(tab) <- c("diff" ,"lwr","upr","p.adj")
tab$stat <- ifelse(tab$`p adj`<0.0001,"****",
ifelse(tab$`p adj`<0.001,"***",
ifelse(tab$`p adj`<0.01,"**",
ifelse(tab$`p adj`<0.05,"*","NS"
))))
tab
tab$stat <- ifelse(tab$p.adj<0.0001,"****",
ifelse(tab$p.adj<0.001,"***",
ifelse(tab$p.adj<0.01,"**",
ifelse(tab$p.adj<0.05,"*","NS"
))))
tab
ggplot(dataframe, aes(x = selected, y = AJ, fill = AJ)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
labs(title="Tetramer.2.PE")
tab <-as.data.frame(TukeyHSD( aov(selected ~ AJ,data = dataframe))[1])
names(tab) <- c("diff" ,"lwr","upr","p.adj")
tab$stat <- ifelse(tab$p.adj<0.0001,"****",
ifelse(tab$p.adj<0.001,"***",
ifelse(tab$p.adj<0.01,"**",
ifelse(tab$p.adj<0.05,"*","NS"
))))
tab
head(dataframe)
ggplot(dataframe, aes(x = selected, y = cluster, fill = cluster)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
labs(title="Tetramer.2.PE")
dataframe$cluster <- paste("Clust ",dataframe$cluster)
dataframe$selected <- log10(dataframe$Tetramer.2.PE)
ggplot(dataframe, aes(x = selected, y = cluster, fill = cluster)) +
geom_density_ridges() +
theme_ridges() +
theme(legend.position = "none") +
theme(axis.title.x = element_blank())+
theme(axis.title.y = element_blank())+
labs(title="Tetramer.2.PE")
# Plot separate ggplot figures in a loop.
library(ggplot2)
# Make list of variable names to loop over.
var_list = combn(names(iris)[1:3], 2, simplify=FALSE)
# Make plots.
plot_list = list()
for (i in 1:3) {
p = ggplot(iris, aes_string(x=var_list[[i]][1], y=var_list[[i]][2])) +
geom_point(size=3, aes(colour=Species))
plot_list[[i]] = p
}
for (i in 1:3) {
p = ggplot(iris, aes(x=var_list[[i]][1], y=var_list[[i]][2])) +
geom_point(size=3, aes(colour=Species))
plot_list[[i]] = p
}
# Save plots to tiff. Makes a separate file for each plot.
for (i in 1:3) {
file_name = paste("iris_plot_", i, ".tiff", sep="")
tiff(file_name)
print(plot_list[[i]])
dev.off()
}
# Another option: create pdf where each page is a separate plot.
pdf("plots.pdf")
for (i in 1:3) {
print(plot_list[[i]])
}
dev.off()
o
p
var_list
# Plot separate ggplot figures in a loop.
library(ggplot2)
# Make list of variable names to loop over.
var_list = combn(names(iris)[1:3], 2, simplify=FALSE)
var_list
# Make plots.
plot_list = list()
for (i in 1:3) {
p = ggplot(iris, aes(x=var_list[[i]][1], y=var_list[[i]][2])) +
geom_point(size=3, aes(colour=Species))
plot_list[[i]] = p
}
p
# Save plots to tiff. Makes a separate file for each plot.
for (i in 1:3) {
file_name = paste("iris_plot_", i, ".tiff", sep="")
tiff(file_name)
print(plot_list[[i]])
dev.off()
}
# Another option: create pdf where each page is a separate plot.
pdf("plots.pdf")
for (i in 1:3) {
print(plot_list[[i]])
}
dev.off()
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
index <- read.csv("test-data/Index/ID.780_colouring column2022.12.29.csv",header = T)
names(index) <- gsub("\\.", " ", names(index))
index <- as.data.frame(index)
index[is.na(index)] <- "not_clonal"
head(index)
selected.col <- index[names(index) %in% "AJBJ"]
names(selected.col) <- "V1"
index[names(index) %in% "AJBJ"] <- factor(selected.col$V1, levels = unique(selected.col$V1),labels = unique(selected.col$V1))
num <- unique(dat[names(dat) %in% input$group_complex_dot])
num <- unique(dat[names(dat) %in% "AJBJ"])
num <- unique(index[names(index) %in% "AJBJ"])
col.gg <- gg_fill_hue(dim(num)[1])
col.gg <- rainbow(dim(num)[1])
palette.complex <- rainbow(dim(num)[1])
palette.complex
names_unique <- as.data.frame(unique(selected.col))
names_unique_size <- cbind(names_unique,as.data.frame(size.ggplot))
ggplot(index, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis) +
theme(text=element_text(size=20,family=input$font_type2),
axis.text.x = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type2),
axis.text.y = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=1,vjust=0,face="plain",family=input$font_type2),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# panel.grid.major.x = element_blank() ,
)
title_axis <- bquote(.("input$x.axis2"))
# dataframe$cluster <- paste("Clust ",dataframe$cluster)
index$selected <- index[,names(index) %in% input$x.axis2]
head(index)
# dataframe$cluster <- paste("Clust ",dataframe$cluster)
index$selected <- index[,names(index) %in% `Tetramer 1 APC`]
# dataframe$cluster <- paste("Clust ",dataframe$cluster)
index$selected <- index[,names(index) %in% "Tetramer 1 APC"]
ggplot(index, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis) +
theme(text=element_text(size=20,family=input$font_type2),
axis.text.x = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type2),
axis.text.y = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=1,vjust=0,face="plain",family=input$font_type2),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# panel.grid.major.x = element_blank() ,
)
ggplot(index, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
View(index)
index_clone <- index[,names(index) %in% c("cloneCount","AJBJ","selected")]
head(index_clone)
index_clone <- index[,names(index) %in% c("cloneCount","AJBJ")]
df3 <- as.data.frame(ddply(index_clone,names(index_clone[-c(2),]),numcolwise(sum)))
df3
df3 <- as.data.frame(ddply(index_clone,names(index_clone[-c(2)]),numcolwise(sum)))
df3
merge(index,index_clone,by=="AJBJ")
merge(index,index_clone,by="AJBJ")
View(df3)
names(df3)[2] <- "Sum_count"
merge(index,df3,by="AJBJ")
index2 <- subset(df3,df3$Sum_count>1)
df4 <- merge(index,df3,by="AJBJ")
index2 <- subset(df4,df4$Sum_count>1)
unique(index2$)
unique(index2$cluster)
index[names(index) %in% "AJBJ"] <- factor(selected.col$V1, levels = unique(selected.col$V1),labels = unique(selected.col$V1))
num <- unique(index[names(index) %in% "AJBJ"])
palette.complex <- rainbow(dim(num)[1])
palette.complex
title_axis <- bquote(.("input$x.axis2"))
# dataframe$cluster <- paste("Clust ",dataframe$cluster)
index$selected <- index[,names(index) %in% "Tetramer 1 APC"]
index_clone <- index[,names(index) %in% c("cloneCount","AJBJ")]
df3 <- as.data.frame(ddply(index_clone,names(index_clone[-c(2)]),numcolwise(sum)))
names(df3)[2] <- "Sum_count"
df4 <- merge(index,df3,by="AJBJ")
index2 <- subset(df4,df4$Sum_count>1)
unique(index2$cluster)
ggplot(index2, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
index2 <- subset(df4,df4$Sum_count>2)
unique(index2$cluster)
ggplot(index2, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
num
num$palette.complex <- palette.complex
head(num)
(num)
num[num$palette.complex %in% unique(index2$AJBJ)]
num[num$palette.complex %in% unique(index2$AJBJ),]
num[,num$palette.complex %in% unique(index2$AJBJ)]
unique(index2$AJBJ)
num[num$palette.complex %in% unique(index2$AJBJ)]
[num$palette.complex %in% unique(index2$AJBJ)]
num$palette.complex %in% unique(index2$AJBJ)
ifelse(num$palette.complex == unique(index2$AJBJ),"keep","remove")
unique(index2$AJBJ)
ifelse(num$palette.complex == as.character(unique(index2$AJBJ)),"keep","remove")
as.character(unique(index2$AJBJ))
df <- as.data.frame(as.character(unique(index2$AJBJ)))
names(df) <- AJBJ
names(df) <- "AJBJ"
merge(df,num,by="AJVJ")
merge(df,num,by="AJBJ")
df.col1 <- merge(df,num,by="AJBJ")
ggplot(index2, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=df.col1$palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
index2 <- subset(df4,df4$Sum_count>1)
unique(index2$cluster)
num$palette.complex <- palette.complex
df <- as.data.frame(as.character(unique(index2$AJBJ)))
names(df) <- "AJBJ"
df.col1 <- merge(df,num,by="AJBJ")
ggplot(index2, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=df.col1$palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
index2 <- subset(df4,df4$Sum_count>1)
index2 <- subset(df4,df4$Sum_count>2)
unique(index2$cluster)
num$palette.complex <- palette.complex
df <- as.data.frame(as.character(unique(index2$AJBJ)))
names(df) <- "AJBJ"
df.col1 <- merge(df,num,by="AJBJ")
ggplot(index2, aes(x = log10(selected), y = as.character(get("AJBJ")), fill = as.character(get("AJBJ")))) +
geom_density_ridges(show.legend = T) +
theme_ridges() +
scale_fill_manual(values=df.col1$palette.complex)+
theme(legend.position = "none") +
labs(title=title_axis)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
