range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
dat <- subset(dat, group=="IFN")
head(dat)
hierarchy <- dat[names(dat) %in% c("AJ","AV")]
hierarchy <- hierarchy[,c("AV","AJ")]
head(hierarchy)
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
head(chain1)
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
palette_rainbow <- rev(rainbow(length(t(df.col.2)),alpha=c(0.75,0)))
col2 <- palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- col2
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
lwd_mat = hierarchy
lwd_mat
lwd_mat[lwd_mat>0] <- 1
lwd_mat[lwd_mat==0] <- 0
lwd_mat[rownames(lwd_mat) %in% c("AV19","AV4") & lwd_mat>0] <- 3
lwd_mat
lwd_mat[lwd_mat==1] <- 0
lwd_mat
border_mat <- lwd_mat
border_mat[border_mat==1] <- 0
border_mat[border_mat>0 ] <- "black"
border_mat[border_mat==0] <- NA
border_mat
lty_mat = lwd_mat
lty_mat
hierarchy
par(mar = rep(0, 4), cex=0.8, family = "serif")
grid.col3
range(hierarchy)
range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
dat <- subset(dat, group=="IFN")
head(dat)
hierarchy <- dat[names(dat) %in% c("AJ","AV")]
hierarchy <- hierarchy[,c("AV","AJ")]
head(hierarchy)
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
head(chain1)
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
palette_rainbow <- rev(rainbow(length(t(df.col.2)),alpha=c(0.75,0)))
col2 <- palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- col2
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
lwd_mat = hierarchy
lwd_mat
lwd_mat[lwd_mat>0] <- 1
lwd_mat[lwd_mat==0] <- 0
lwd_mat[rownames(lwd_mat) %in% c("AV19","AV4") & lwd_mat>0] <- 4
lwd_mat
lwd_mat[lwd_mat==1] <- 0
lwd_mat
border_mat <- lwd_mat
border_mat[border_mat==1] <- 0
border_mat[border_mat>0 ] <- "black"
border_mat[border_mat==0] <- NA
border_mat
lty_mat = lwd_mat
lty_mat
hierarchy
par(mar = rep(0, 4), cex=0.8, family = "serif")
grid.col3
range(hierarchy)
range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
dat <- subset(dat, group=="IFN")
head(dat)
hierarchy <- dat[names(dat) %in% c("AJ","AV")]
hierarchy <- hierarchy[,c("AV","AJ")]
head(hierarchy)
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
head(chain1)
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
palette_rainbow <- rev(rainbow(length(t(df.col.2)),alpha=c(0.75,0)))
col2 <- palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- col2
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
lwd_mat = hierarchy
lwd_mat
lwd_mat[lwd_mat>0] <- 1
lwd_mat[lwd_mat==0] <- 0
lwd_mat[rownames(lwd_mat) %in% c("AV19","AV4") & lwd_mat>0] <- 4
lwd_mat
lwd_mat[lwd_mat==1] <- 0
lwd_mat
border_mat <- lwd_mat
border_mat[border_mat==1] <- 0
border_mat[border_mat>0] <- "black"
border_mat[border_mat==0] <- NA
border_mat
lty_mat = lwd_mat
lty_mat[lty_mat>0] <- 0.75
hierarchy
par(mar = rep(0, 4), cex=0.8, family = "serif")
grid.col3
range(hierarchy)
range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
dat <- subset(dat, group=="IFN")
head(dat)
hierarchy <- dat[names(dat) %in% c("AJ","AV")]
hierarchy <- hierarchy[,c("AV","AJ")]
head(hierarchy)
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
head(chain1)
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
palette_rainbow <- rev(rainbow(length(t(df.col.2)),alpha=c(0.75,0)))
col2 <- palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- col2
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
lwd_mat = hierarchy
lwd_mat
lwd_mat[lwd_mat>0] <- 1
lwd_mat[lwd_mat==0] <- 0
lwd_mat[rownames(lwd_mat) %in% c("AV19","AV4") & lwd_mat>0] <- 4
lwd_mat
lwd_mat[lwd_mat==1] <- 0
lwd_mat
border_mat <- lwd_mat
border_mat[border_mat==1] <- 0
border_mat[border_mat>0] <- "black"
border_mat[border_mat==0] <- NA
border_mat
lty_mat = lwd_mat
lty_mat[lty_mat>0] <- 1
hierarchy
par(mar = rep(0, 4), cex=0.8, family = "serif")
grid.col3
range(hierarchy)
range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
dat <- subset(dat, group=="IFN")
head(dat)
hierarchy <- dat[names(dat) %in% c("AJ","AV")]
hierarchy <- hierarchy[,c("AV","AJ")]
head(hierarchy)
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
head(chain1)
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
palette_rainbow <- rev(rainbow(length(t(df.col.2)),alpha=c(0.75,0)))
col2 <- palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- col2
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
lwd_mat = hierarchy
# line thickness
lwd_mat[lwd_mat>0] <- 1
lwd_mat[lwd_mat==0] <- 0
lwd_mat[rownames(lwd_mat) %in% c("AV19","AV4") & lwd_mat>0] <- 4
lwd_mat[lwd_mat==1] <- 0
lwd_mat
# boarder colour
border_mat <- lwd_mat
border_mat[border_mat==1] <- 0
border_mat[border_mat>0] <- "black"
border_mat[border_mat==0] <- NA
border_mat
# line type
lty_mat = lwd_mat
lty_mat[lty_mat>0] <- 1
hierarchy
par(mar = rep(0, 4), cex=0.8, family = "serif")
grid.col3
range(hierarchy)
range(grid.col3)
grid.col3
col_fun
alpha_mat <- lwd_mat
alpha_mat[alpha_mat==0] <- 0.75
alpha_mat[alpha_mat>1] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
alpha_mat
lty_mat
circos.clear()
#par(new = TRUE) # <- magic
# circos.par("canvas.xlim" = c(-2, 2), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# col = col2,
order = df.col.2$V1,
link.border = border_mat,
link.lwd = lwd_mat,
link.lty = lty_mat,
transparency =  alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
)
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
#circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
#            facing = "clockwise", niceFacing = TRUE, adj = c(0, 0))
}, bg.border = NA)
as.matrix(table(hierarchy[,1], hierarchy[$AJ],2))
as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(table(hierarchy[1], hierarchy[2]))
as.matrix(table(hierarchy[1], hierarchy[,1]))
hierarchy
hierarchy <- as.matrix(table(hierarchy$AV, hierarchy$AJ))
hierarchy
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
as.matrix(table(hierarchy[1], hierarchy[2]))
as.matrix(table(hierarchy[,1], hierarchy[,2]))
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
