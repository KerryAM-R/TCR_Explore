chordDiagram(df)
par(mar = rep(0, 4), cex=1, family = "serif")
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(t(hierarchy), annotationTrack = "grid",
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRJ","TRV")]
hierarchy <- hierarchy %>%
select("TRJ", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRJ")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
chain1
chain2
hierarchy
hierarchy$BJ03 <- c(1:10)
hierarchy$BJ03 <- c(1:29)
chordDiagram((hierarchy))
hierarchy
hierarchy[3] <- c(1:29)
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRJ")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy2 <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
hierarchy[3] <- c(1:29)
hierarchy[3]
hierarchy2[3]
hierarchy2[,3]
hierarchy2[,3] <- c(1:29)
grid.col3
chain2
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(TCR.Explore)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
install.packages("showtext")
runApp('TCR_Explore_v1.0.R')
install.packages("sangerseqR")
runApp('TCR_Explore_v1.0.R')
## volcano plots
install.packages(c("tidyverse","ggplot2" ,"ggrepel","shiny","shinyBS","gridExtra","DT","plyr","dplyr","reshape2","treemapify","circlize","scales", "readxl","vegan","VLF","randomcoloR","colourpicker","devtools","muscle","markdown"))
install.packages(c("tidyverse", "ggplot2", "ggrepel", "shiny", "shinyBS", "gridExtra", "DT", "plyr", "dplyr", "reshape2", "treemapify", "circlize", "scales", "readxl", "vegan", "VLF", "randomcoloR", "colourpicker", "devtools", "muscle", "markdown"))
BiocManager::install("flowCore")
library(shiny); runApp('TCR_Explore_v1.0.R')
BiocManager::install("sangerseqR")
runApp('TCR_Explore_v1.0.R')
install.packages("umap")
install.packages("colorset")
BiocManager::install("colorset")
BiocManager::install("motifStack")
runApp('TCR_Explore_v1.0.R')
BiocManager::install("muscle")
BiocManager::install("fossil")
BiocManager::install("DiffLogo")
runApp('TCR_Explore_v1.0.R')
head(test)
test <- read.table("~/Desktop/Shin_test_AIRR.txt")
head(test)
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t")
head(test)
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
head(test)
x2 <- test
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
x3 <- x2
x3 <- x3[!is.na(x3[names(x2) %in% c("allVHitsWithScore","allJHitsWithScore")]),]
x3 <- x3[!is.na(x3[names(x2) %in% c("allVHitsWithScore","allJHitsWithScore")]),]
head(x3)
x3[names(x2) %in% c("allVHitsWithScore","allJHitsWithScore")]
x3[names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")]
x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")]
x3 <- x2
x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")]
is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])
x3 <- x3[FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])]
head(x3)
x3[FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])]
[FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])]
is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])
FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])
TRUE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])
head(x3)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "\\*00")
head(x3$TRV)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[(]")
head(x3$TRV)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "\\*00")
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[(]")
head(x3$TRV)
x3$TRV
head(x3)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[*]00(.....)")
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[(]")
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
head(x3)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[*]00(.....)")
x3$TRV
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[*]00(......)")
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[(]")
x3$TRV
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
head(x3)
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[*]00(......)")
x3$TRV <- str_remove(x3[,names(x3) %in% "allVHitsWithScore"], "[(]")
x3$TRV
x3$TRV <- strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")
strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
head(x3)
as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))
t(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))
as.data.frame(t(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")))
t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))
t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")))
t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")))
x3$TRV <- t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")))[1]
x3$TRV
x3$TRV <- t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]")))[1,]
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
head(x3)
as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
df_trav <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$TRV <- df_trav$V1
x3$TRV
df_trv <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
df_trj <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$TRJ <- df_trj$V1
x3 <- x3[-c(grep("\\_",x3[,names(x3) %in% input$CDR3.gene.clean])),]
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
df_trv <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$TRV <- df_trv$V1
x3$TRV
df_trj <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$TRJ <- df_trj$V1
head(x3)
x3 <- x3[-c(grep("\\_",x3[,names(x3) %in% "aaSeqCDR3"])),]
x3 <- x3[-c(grep("\\*",x3[,names(x3) %in% "aaSeqCDR3"])),]
x3
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
df_trv <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$TRV <- df_trv$V1
x3$TRV
if (input$D_chain_present == "yes") {
x3$TRD <- str_remove(x3[,names(x3) %in% input$D.GENE.clean], "\\*00")
}
df_trj <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$TRJ <- df_trj$V1
head(x3)
grep("\\_",x3[,names(x3) %in% "aaSeqCDR3"])
grep("[_]",x3[,names(x3) %in% "aaSeqCDR3"])
grep("[*]",x3[,names(x3) %in% "aaSeqCDR3"])
x3[,names(x3) %in% "aaSeqCDR3"]
grep("[_]","CDCDD_*CDKLF")
grep("[*]","CDCDD_*CDKLF")
grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"])
TRUE %in% grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"])
grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"])
x3[grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"]),]
x3[!grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"]),]
x3
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
D_chain_present = "no"
if (input$D_chain_present == "yes") {
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRD <- gsub("NA","-",x3$TRD)
}
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
if (D_chain_present == "yes") {
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRD <- gsub("NA","-",x3$TRD)
}
x3$TRVJ_CDR3 <- paste(x3$TRVJ, x3[,names(x3) %in% input$CDR3.gene.clean],sep="_")
x3$TRVJ_CDR3 <- paste(x3$TRVJ, x3[,names(x3) %in% "aaSeqCDR3"],sep="_")
if (input$D_chain_present == "yes") {
x3$TRVDJ_CDR3 <- paste(x3$TRVDJ, x3[,names(x3) %in% input$CDR3.gene.clean],sep="_")
}
x3 <- x3[!names(x3) %in% c("cloneCount.1")]
x3
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
df_v_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$v_gene <- df_v_gene$V1
if (input$D_chain_present == "yes") {
x3$TRD <- str_remove(x3[,names(x3) %in% input$D.GENE.clean], "\\*00")
}
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2 <- data.frame(cloneCount = x2[,names(x2) %in% "cloneCount"], x2)
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
if (FALSE %in% is.na(x3[,names(x3) %in% c("allVHitsWithScore","allJHitsWithScore")])) {
}
df_v_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$v_gene <- df_v_gene$V1
if (D_chain_present == "yes") {
x3$TRD <- str_remove(x3[,names(x3) %in% D.GENE.clean], "\\*00")
}
df_j_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$j_gene <- df_j_gene$V1
head(x3)
if(TRUE %in% grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
if(TRUE %in% grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
D_chain_present = "no"
x3
x3$v_geneJ <- paste(x3$v_gene,x3$j_gene,sep=".")
if (D_chain_present == "yes") {
x3$v_geneDJ <- paste(x3$v_gene,x3$TRD,x3$j_gene,sep=".")
x3$v_geneDJ <- gsub(".NA.",".",x3$v_geneDJ)
x3$TRD <- gsub("NA","-",x3$TRD)
}
x3$v_geneJ_CDR3 <- paste(x3$v_geneJ, x3[,names(x3) %in% "aaSeqCDR3"],sep="_")
if (D_chain_present == "yes") {
x3$v_geneDJ_CDR3 <- paste(x3$v_geneDJ, x3[,names(x3) %in% CDR3.gene.clean],sep="_")
}
x3 <- x3[!names(x3) %in% c("cloneCount.1")]
x3
x2 <- x2 %>%
select(all_of(cloneCount), everything())
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
head(x2)
x2 <- x2 %>%
select(all_of("cloneCount"), everything())
head(x2)
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
BiocManager::install("DiffLogo")
runApp('TCR_Explore_v1.0.R')
write.table(x3,"Shin_TCR_Explore.tsv",sep = "\t")
head(x3)
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2 <- x2 %>%
select(all_of("cloneCount"), everything())
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
df_v_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$v_gene <- df_v_gene$V1
if (D_chain_present == "yes") {
df_d_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allDHitsWithScore"],"[*]"))))
x3$d_gene <- df_d_gene$V1
}
df_j_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$j_gene <- df_j_gene$V1
head(x3)
if(TRUE %in% grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
if(TRUE %in% grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
D_chain_present = "no"
x3
x3$vj_gene <- paste(x3$v_gene,x3$j_gene,sep=".")
if (D_chain_present == "yes") {
x3$v_geneDJ <- paste(x3$v_gene,x3$d_gene,x3$j_gene,sep=".")
x3$v_geneDJ <- gsub(".NA.",".",x3$v_geneDJ)
x3$d_gene <- gsub("NA","-",x3$d_gene)
}
x3$vj_gene_cdr3 <- paste(x3$vj_gene, x3[,names(x3) %in% "aaSeqCDR3"],sep="_")
if (D_chain_present == "yes") {
x3$vdj_gene_cdr3 <- paste(x3$vdj_gene, x3[,names(x3) %in% CDR3.gene.clean],sep="_")
}
head(x3)
write.table(x3,"Shin_TCR_Explore.tsv",sep = "\t")
write.table(x3,"Shin_TCR_Explore.tsv",sep = "\t", row.names = F)
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2$group <- "Group"
x2$Indiv <- "Indiv"
x2$group.indiv <- paste(x2$group,x2$Indiv,sep = ".")
x2 <- x2 %>%
select(all_of(c(input$countcolumn,"group","Indiv","group.indiv")), everything())
test <- read.table("~/Desktop/Shin_test_AIRR.txt", sep = "\t", header = T)
x2 <- test
x2$group <- "Group"
x2$Indiv <- "Indiv"
x2$group.indiv <- paste(x2$group,x2$Indiv,sep = ".")
x2 <- x2 %>%
select(all_of(c("cloneCount","group","Indiv","group.indiv")), everything())
names(x2)[1] <- "cloneCount"
head(x2)
x3 <- x2
df_v_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allVHitsWithScore"],"[*]"))))
x3$v_gene <- df_v_gene$V1
if (D_chain_present == "yes") {
df_d_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allDHitsWithScore"],"[*]"))))
x3$d_gene <- df_d_gene$V1
}
df_j_gene <- as.data.frame(t(as.data.frame(strsplit(x3[,names(x3) %in% "allJHitsWithScore"],"[*]"))))
x3$j_gene <- df_j_gene$V1
head(x3)
if(TRUE %in% grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[_]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
if(TRUE %in% grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"])) {
x3 <- x3[!grepl("[*]",x3[,names(x3) %in% "aaSeqCDR3"]),]
}
D_chain_present = "no"
x3
x3$vj_gene <- paste(x3$v_gene,x3$j_gene,sep=".")
if (D_chain_present == "yes") {
x3$v_geneDJ <- paste(x3$v_gene,x3$d_gene,x3$j_gene,sep=".")
x3$v_geneDJ <- gsub(".NA.",".",x3$v_geneDJ)
x3$d_gene <- gsub("NA","-",x3$d_gene)
}
x3$vj_gene_cdr3 <- paste(x3$vj_gene, x3[,names(x3) %in% "aaSeqCDR3"],sep="_")
if (D_chain_present == "yes") {
x3$vdj_gene_cdr3 <- paste(x3$vdj_gene, x3[,names(x3) %in% CDR3.gene.clean],sep="_")
}
head(x3)
write.table(x3,"Shin_TCR_Explore.tsv",sep = "\t", row.names = F)
runApp('TCR_Explore_v1.0.R')
