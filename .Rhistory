library(reticulate)
reticulate::repl_python()
library(abind)
detach("package:abind", unload = TRUE)
install.packages("shiny")
install.packages("reticulate")
install.packages("reticulate")
install.packages("reticulate")
install.packages("DT")
library(shiny); runApp('TCR_Explore_v1.0.R')
options(shiny.maxRequestSize=30*1024^2)
## volcano plots
require("markdown")
require("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
library("ggseqlogo")
library("sangerseqR")
runApp('TCR_Explore_v1.0.R')
df2 <- df2[!names(df2) %in% c("ID","Sequence.number","Sequence.ID","V.DOMAIN.Functionality","JUNCTION.frame","JUNCTION")]
# user interface  ----
ui <- navbarPage(title = tags$img(src = "Logo.png",window_title="TCR_Explore", height = 90, width = 140,
style = "margin:-35px 10px"
),
position = "static-top",collapsible = F,
tags$head(
tags$style(HTML(' .navbar {
height: 80px;
min-height:80px !important;
}
.navbar-nav > li > a, .navbar-brand {
padding-top:30px !important;
padding-bottom:30px !important;
height: 20px;
}'))),
tabPanel("Tutorials",
navlistPanel(id = "Markdown_panel",widths = c(2, 10),
tabPanel("Overview",
includeMarkdown("README.md"),
# tags$video(id="video2", type = "video/mp4",src = "test.mp4", controls = "controls", height="720px")
),
tabPanel("Quality control information (includes video tutorial)",
h3("Tutorial video of Quality control processes"),
uiOutput("video"),
fluidRow(includeMarkdown("READMEQC.md")),
# tags$video(id="video2", type = "video/mp4",src = "test.mp4", controls = "controls", height="720px")
),
tabPanel("TCR analysis information",
includeMarkdown("README.scTCR.md")),
tabPanel("Paired TCR with Index data information",
includeMarkdown("README.FACS.md")),
tabPanel("Video examples",
tabsetPanel(
tabPanel("Overview of Pairing",
uiOutput("video2"),
),
tabPanel("Motif analysis",
uiOutput("video3"),
),
tabPanel("Diversity and chain usage",
uiOutput("video4"),
),
tabPanel("Overlap",
uiOutput("video5"),
),
tabPanel("Paired TCR with Index data",
uiOutput("video6"),
),
),
),
tabPanel("Session info",
tabPanel("Session info",
div(style="width:800px",
verbatimTextOutput("sessionInfo")),
tags$head(includeHTML(("google-analytics.html")))
)
)
)
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
head(x)
head(x$frame_type)
uniqu(x$frame_type)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
unique(x2$frame_type)
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(j_gene,v_gene)
names(x2)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(j_gene)
drop_na(j_gene)
x2 <- x2 %>% drop_na(x2$j_gene)
x2 <- x2 %>% drop_na(x2$j_gene,x2$v_gene)
x2 %>% drop_na(x2$j_gene,x2$v_gene)
View(x2)
x2[!is.na(x2$x2),]
x2[!is.na(x2$v_gene),]
x2 <- x2[!is.na(x2$v_gene),]
x2 <- x2[!is.na(v_gene),]
x2 <- x2[!is.na(x2$v_gene),]
x2 <- x2[!is.na(x2$j_gene),]
is.na(x2$j_gene)
unique(is.na(x2$j_gene))
unique(x2$j_gene)
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- subset(x2, x2$frame_type=="In")
unique(x2$j_gene)
x2 <- x2[!is.na(x2$v_gene),]
View(x2)
x2 <- x2 %>% mutate_all(na_if,"")
x2 %>% drop_na(x2$v_gene)
x2 %>% drop_na(v_gene)
dim(x2 %>% drop_na(v_gene))
x2 <- x2 %>% drop_na(v_gene,j_gene)
x <- x %>% mutate_all(na_if,"")
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- x %>%
select_if(~ !any(is.na(.)))
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
dataframe = read.table("test-data/sampleExport/TCRG_MRD_Day29_Case1.tsv",sep="\t",header=T)
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(v_gene,j_gene)
x2 <- data.frame(cloneCount = x2$seq_reads, x2)
x2 <- data.frame(cloneCount = x2$sequence_result_status, x2)
summary(x2$sequence_result_status)
View(x2)
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(v_gene,j_gene)
summary(x2$sequence_result_status)
x2 <- data.frame(cloneCount = x2$templates, x2)
x3 <- x2[!names(x2) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive","seq_reads",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3$TRJ <- gsub("^TCR","",x3$j_family)
x3$TRV <- gsub("^TCR","",x3$v_family)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3
require(tidyverse)
dataframe = read.table("test-data/sampleExport/TCRG_MRD_Day29_Case1.tsv",sep="\t",header=T)
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(v_gene,j_gene)
summary(x2$sequence_result_status)
x2 <- data.frame(cloneCount = x2$templates, x2)
x3 <- x2[!names(x2) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive","seq_reads",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3$TRJ <- gsub("^TCR","",x3$j_family)
x3$TRV <- gsub("^TCR","",x3$v_family)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x2 %>% mutate_all(na_if,"")
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- x2 %>% drop_na(v_gene,j_gene)
summary(x2$sequence_result_status)
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x2 <- data.frame(cloneCount = x2$templates, x2)
names(x2)
summary(x2$cloneCount)
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
summary(x2$cloneCount)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
