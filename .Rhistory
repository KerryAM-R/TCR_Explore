select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x3 <- x2
x3 <- x3[!is.na(x3[names(x3) %in% c("cloneCount")]),]
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
summary(x2$cloneCount)
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3)] <- "-"
View(x3)
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x3 <- x2
x3 <- x3[!is.na(x3[names(x3) %in% c("cloneCount")]),]
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
summary(x2$cloneCount)
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3)]
x3 <- x2
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
summary(x2$cloneCount)
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3)]
x3[is.na(x3$)]
x3[is.na(x3$TRJ)]
x3[is.na(x3$TRJ),]
x3[is.na(x3$TRD),]
x3[is.na(x3$TRV),]
x3[is.na(x3$TRD),]
x3[is.na(x3)]
View(x3)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x3 <- x2
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3$TRD)]
x3[,is.na(x3$TRD)]
x3[is.na(x3$TRD),]
x3[is.na(x3$TRD)] <- "-"
x3[is.na(x3$TRD)] <- 0
x3[is.na(x3)] <- 0
x3
x3[is.na(x3)] <- "Missing data"
x3[is.na(x3$TRD),]
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x3 <- x2
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3$TRD),]
x3[is.na(x3)] <- "Missing data"
x3
x3[is.na(x3)] <- "-"
require(tidyverse)
dataframe = read.table("test-data/sampleExport/TCRG_MRD_Day29_Case1.tsv",sep="\t",header=T)
x <- read.table("test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",sep="\t",header=T)
unique(x$frame_type)
x2 <- x %>%
select_if(~ !any(is.na(.)))
x2 <- x2 %>% mutate_all(na_if,"")
x2 <- subset(x2, x2$frame_type=="In")
x2 <- data.frame(cloneCount = x2[names(x2) %in% "templates"], x2)
x3 <- x2
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads",
"fraction_productive",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads"
)]
x3[is.na(x3$TRD),]
x3[is.na(x3)] <- "-"
x3
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads","sample_catalog_tags","sample_rich_tags_json",
"fraction_productive","sample_tags","sku","total_templates",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads","sample_cell",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties","antibody",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads",
"v_deletions",	"d5_deletions",	"d3_deletions",	"j_deletions",	"n2_insertions",
"n1_insertions",	"v_index",	"n1_index",	"n2_index",	"d_index",	"j_index",	"v_family_ties",	"d_family_ties",	"d_gene_ties",	"d_allele_ties",	"j_gene_ties"
)]
x3[is.na(x3$TRD),]
x3[is.na(x3)] <- "-"
x3
View(x3)
runApp('TCR_Explore_v1.0.R')
x3 <- gsub(" ","",x3)
unique(x3$TRJ)
x3 <- gsub(" ","",x3$TRJ)
x3 <- x2
x3$TRJ <- x3[names(x3) %in% "j_family"]
x3$TRJ
gsub("^TCR","",x3$j_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads","sample_catalog_tags","sample_rich_tags_json",
"fraction_productive","sample_tags","sku","total_templates",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads","sample_cell",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties","antibody",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads",
"v_deletions",	"d5_deletions",	"d3_deletions",	"j_deletions",	"n2_insertions",
"n1_insertions",	"v_index",	"n1_index",	"n2_index",	"d_index",	"j_index",	"v_family_ties",	"d_family_ties",	"d_gene_ties",	"d_allele_ties",	"j_gene_ties"
)]
x3[is.na(x3$TRD),]
x3[is.na(x3)] <- "-"
x3$TRJ <- gsub(" ","",x3$TRJ)
unique(x3$TRJ)
x3$v_gene <- gsub(" ","",x3$v_gene)
x3$TRV <- gsub("^TCR","",x3$v_gene)
x3$TRJ <- gsub("^TCR","",x3$j_gene)
x3$TRD <- gsub("^TCR","",x3$d_gene)
x3 <- x3[!is.na(x3[names(x3) %in% c("TRV")]),]
x3$TRVJ <- paste(x3$TRV,x3$TRJ,sep=".")
x3$TRVDJ <- paste(x3$TRV,x3$TRD,x3$TRJ,sep=".")
x3$TRVDJ <- gsub(".NA.",".",x3$TRVDJ)
x3$TRVJ_CDR3 <- paste(x3$TRVJ,x3$amino_acid,sep="_")
x3 <- x3[!names(x3) %in% c("product_subtype","frame_type","total_dj_reads",
"productive_entropy","rearrangement_type",
"order_name","release_date",
"upload_date","primer_set",
"total_outofframe_reads","sample_catalog_tags","sample_rich_tags_json",
"fraction_productive","sample_tags","sku","total_templates",
"sequence_result_status","productive_clonality","stop_rearrangements",
"outofframe_rearrangements","total_rearrangements","total_reads","sample_cell",
"productive_rearrangements","counting_method","v_allele_ties","v_gene_ties","antibody",
"sample_clonality", "max_productive_frequency","sample_entropy","sample_simpson_clonality",
"max_frequency","productive_simpson_clonality","total_stop_reads","total_productive_reads",
"v_deletions",	"d5_deletions",	"d3_deletions",	"j_deletions",	"n2_insertions",
"n1_insertions",	"v_index",	"n1_index",	"n2_index",	"d_index",	"j_index",	"v_family_ties",	"d_family_ties",	"d_gene_ties",	"d_allele_ties",	"j_gene_ties"
)]
x3[is.na(x3$TRD),]
x3[is.na(x3)] <- "-"
unique(x3$v_gene)
unique(x3$j_gene)
unique(x3$j_family)
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
## volcano plots
require("markdown")
require("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
library("ggseqlogo")
library("sangerseqR")
# library(shinydashboard)
# library(shinymanager)
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
citation("markdown")
citation("rmarkdown")
citation("sangerseqR")
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls")
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls", sheet = 2)
df <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls")
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls", sheet = 2)
df3 <- df1[names(df1) %in% c("Sequence number","Sequence ID","V-DOMAIN Functionality", "V-GENE and allele","V-REGION identity %","J-GENE and allele","J-REGION identity %","D-GENE and allele","JUNCTION frame","JUNCTION (with frameshift)","CDR3-IMGT (with frameshift)","Sequence")]
df1 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls")
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls", sheet = 2)
df3 <- df1[names(df1) %in% c("Sequence number","Sequence ID","V-DOMAIN Functionality", "V-GENE and allele","V-REGION identity %","J-GENE and allele","J-REGION identity %","D-GENE and allele","JUNCTION frame","JUNCTION (with frameshift)","CDR3-IMGT (with frameshift)","Sequence")]
df4 <- df2[names(df2) %in% c("Sequence number","Sequence ID","JUNCTION","JUNCTION (AA)","JUNCTION (with frameshift)","JUNCTION (AA) (with frameshift)","CDR3-IMGT","CDR3-IMGT (AA)","V-REGION")]
df_chain1 <- merge(df3,df4,by=c("Sequence number","Sequence ID"))
df_chain1 <- as.data.frame(df_chain1)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('Musmus ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Musmus ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Musmus ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('see comment','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('see comment','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('see comment','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[(]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[)]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' ','',df_chain1$`V-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('TR','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' or ',', ',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('TR','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('TR','',df_chain1$`D-GENE and allele`)
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(]see comment','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality` <- gsub('[)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT"))))
source("~/.active-rstudio-document", echo=TRUE)
df_chain1
df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`J-REGION identity %`<90,"J Identity issue","No issue flagged by IMGT"))))
df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
ifelse(df_chain1$`J-REGION identity %`<90,"J Identity issue")
ifelse(df_chain1$`J-REGION identity %`<90,"J Identity issue",df_chain1$`J-REGION identity %`)
ifelse(df_chain1$`J-REGION identity %`==100 ,"J Identity issue",df_chain1$`J-REGION identity %`)
ifelse(as.numeric(df_chain1$`J-REGION identity %`)==100 ,"J Identity issue",df_chain1$`J-REGION identity %`)
ifelse(as.numeric(df_chain1$`J-REGION identity %`)<=90 ,"J Identity issue",df_chain1$`J-REGION identity %`)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`<=90),"J Identity issue","No issue flagged by IMGT"))))
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`<90),"J Identity issue","No issue flagged by IMGT"))))
ifelse(as.numeric(df_chain1$`J-REGION identity %`)<=90 ,"J Identity issue",df_chain1$`J-REGION identity %`)
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
View(df_chain1)
ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`<=90),"J Identity issue","No issue flagged by IMGT"))))
df1 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls")
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls", sheet = 2)
df3 <- df1[names(df1) %in% c("Sequence number","Sequence ID","V-DOMAIN Functionality", "V-GENE and allele","V-REGION identity %","J-GENE and allele","J-REGION identity %","D-GENE and allele","JUNCTION frame","JUNCTION (with frameshift)","CDR3-IMGT (with frameshift)","Sequence")]
df4 <- df2[names(df2) %in% c("Sequence number","Sequence ID","JUNCTION","JUNCTION (AA)","JUNCTION (with frameshift)","JUNCTION (AA) (with frameshift)","CDR3-IMGT","CDR3-IMGT (AA)","V-REGION")]
df_chain1 <- merge(df3,df4,by=c("Sequence number","Sequence ID"))
df_chain1 <- as.data.frame(df_chain1)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('Musmus ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Musmus ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Musmus ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('see comment','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('see comment','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('see comment','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[(]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[)]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' ','',df_chain1$`V-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('TR','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' or ',', ',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('TR','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('TR','',df_chain1$`D-GENE and allele`)
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(]see comment','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality` <- gsub('[)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`<=90),"J Identity issue","No issue flagged by IMGT"))))
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
df1 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls")
df2 <- readxl::read_xls("~/Desktop/CBZ-MPE paper/DR20012 CBZ/TCR_Explore/CD8/vquest CD8 1-51.xls", sheet = 2)
df3 <- df1[names(df1) %in% c("Sequence number","Sequence ID","V-DOMAIN Functionality", "V-GENE and allele","V-REGION identity %","J-GENE and allele","J-REGION identity %","D-GENE and allele","JUNCTION frame","JUNCTION (with frameshift)","CDR3-IMGT (with frameshift)","Sequence")]
df4 <- df2[names(df2) %in% c("Sequence number","Sequence ID","JUNCTION","JUNCTION (AA)","JUNCTION (with frameshift)","JUNCTION (AA) (with frameshift)","CDR3-IMGT","CDR3-IMGT (AA)","V-REGION")]
df_chain1 <- merge(df3,df4,by=c("Sequence number","Sequence ID"))
df_chain1 <- as.data.frame(df_chain1)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('Musmus ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Musmus ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Musmus ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('see comment','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('see comment','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('see comment','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[(]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[)]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' ','',df_chain1$`V-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('TR','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' or ',', ',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('TR','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('TR','',df_chain1$`D-GENE and allele`)
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(]see comment','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality` <- gsub('[)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`<=90),"J Identity issue","No issue flagged by IMGT"))))
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
ifelse(as.numeric(df_chain1$`J-REGION identity %`<=90),"J Identity issue","No issue flagged by IMGT")
ifelse(as.numeric(df_chain1$`J-REGION identity %`<90),"J Identity issue","No issue flagged by IMGT")
ifelse(as.numeric(df_chain1$`J-REGION identity %`)<90,"J Identity issue","No issue flagged by IMGT")
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(as.numeric(df_chain1$`V-REGION identity %`<=90),"V Identity issue",
ifelse(as.numeric(df_chain1$`J-REGION identity %`)<=90,"J Identity issue","No issue flagged by IMGT"))))
df <- df_chain1[names(df_chain1) %in% c("J-REGION identity %","V.sequence.quality.check")]
View(df)
library(shiny); runApp('TCR_Explore_v1.0.R')
