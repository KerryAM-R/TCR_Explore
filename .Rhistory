ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
server = source("server.R")
server
shinyApp(ui, server)
x <- function(input, output, session) {
df <- reactive({
inFiles <- input$fileIn
df <- data.frame()
if (is.null(inFiles))
return(NULL)
for (i in seq_along(inFiles$datapath)) {
tmp <- read.csv(inFiles$datapath[i], header = FALSE)
df <- rbind(df, tmp)
}
df
})
output$tbl <- DT::renderDataTable(
df()
)
output$tbl2 <- DT::renderDataTable(
input$fileIn
)
output$results = renderPrint({
input$mydata
})
}
shinyApp(ui, x)
runApp()
ui = source("ui.R")
server = source("server.R")
server
shinyApp(ui, x)
ui = source("ui.R")
server = source("server.R")
server
shinyApp(ui, x)
?addResourcePath()
runApp('~/Documents/PhD_2018-2021/R_files/TCR_Explore/TCR_Explore_v1.0.R')
library(TCR.Explore)
library(shiny); runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('~/Documents/PhD_2018-2021/R_files/TCR_Explore/TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library("memisc")
install.packages("memisc")
library("memisc")
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny)
members <- data.frame(name=c("Name 1", "Name 2"), nr=c('BCRA1','FITM2'))
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6, selectInput("Member", label=h5("Choose a option"),choices=c('BCRA1','FITM2'))
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
))
server <- function(input, output) {
observe({
query <- members[which(members$nr==input$Member),2]
test <<- paste0("http://news.scibite.com/scibites/news.html?q=GENE$",query)
})
output$frame <- renderUI({
input$Member
my_test <- tags$iframe(src=test, height=600, width=535)
print(my_test)
my_test
})
}
shinyApp(ui, server)
library(shiny)
members <- data.frame(name=c("Name 1", "Name 2"), nr=c('BCRA1','FITM2'))
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6, selectInput("Member", label=h5("Choose a option"),choices=c('BCRA1','FITM2'))
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
))
server <- function(input, output) {
observe({
test <<- paste0("https://www.youtube.com/watch?v=fbI1eJ_zAB8")
})
output$frame <- renderUI({
input$Member
my_test <- tags$iframe(src=test, height=600, width=535)
print(my_test)
my_test
})
}
shinyApp(ui, server)
library(shiny)
members <- data.frame(name=c("Name 1", "Name 2"), nr=c('BCRA1','FITM2'))
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
))
server <- function(input, output) {
output$frame <- renderUI({
my_test <- tags$iframe(src="https://www.youtube.com/watch?v=fbI1eJ_zAB8", height=600, width=535)
print(my_test)
my_test
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
))
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
)
library(shiny)
members <- data.frame(name=c("Name 1", "Name 2"), nr=c('BCRA1','FITM2'))
ui <- fluidPage(titlePanel("Getting Iframe"),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6, selectInput("Member", label=h5("Choose a option"),choices=c('BCRA1','FITM2'))
))),
mainPanel(fluidRow(
htmlOutput("frame")
)
)
))
server <- function(input, output) {
output$frame <- renderUI({
my_test <- tags$iframe(src="https://www.youtube.com/watch?v=5NUDiR8B848", height=600, width=535)
print(my_test)
my_test
})
}
shinyApp(ui, server)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U")
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video",width = "720px"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U")
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video")),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U", width = 600, height = 400)
})
}
)
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U", width = 600, height = 400)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U", width = 600, height = 400)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U", width = 7200)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/XQTAD9P5A1U", width = 720, height = 1080)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/watch?v=mMkHpiLt_Hg", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/watch?v=mMkHpiLt_Hg", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/watch?v=mMkHpiLt_Hg", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/watch?v=up5k-WgJpYU", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/v=up5k-WgJpYU", width = 720, height = 7)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/up5k-WgJpYU", width = 720, height = 7)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/up5k-WgJpYU", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/mMkHpiLt_Hg", width = 720, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/mMkHpiLt_Hg", width = 1080, height = 720)
})
}
)
shinyApp(
ui = fluidPage(titlePanel("Title"),
mainPanel(htmlOutput("video"))),
server = function(input, output, session) {
output$video <- renderUI({
tags$iframe(src = "https://www.youtube.com/embed/mMkHpiLt_Hg", width = 1080, height = 720)
})
}
)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
df <- subset(df, get(input$group_column)==input$selected_group_chain)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
## volcano plots
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep(input$aa.or.nt,names(df1))])
df1$len1 <- nchar(df1[,grep("Junction_A",names(df1))])
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
validate(
need(nrow(df)>0,
error_message_val1)
)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep("Junction_A",names(df1))])
nchar(df1[,grep("Junction_A",names(df1))])
df1
names(df1)
nchar(df1[,grep("JUNCTION_A",names(df1))])
df1$len1 <- nchar(df1[,grep("Junction_A",names(df1))])
df1$len1 <- nchar(df1[,grep("JUNCTION_A",names(df1))])
install.packages("moments")
library(moments)
skewness(df1$len1)
df1 <- subset(df1,df1$group=="IFN")
skewness(df1$len1)
df1 <- subset(df1,df1$group=="CD8")
skewness(df1$len1)
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
validate(
need(nrow(df)>0,
error_message_val1)
)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
names(df1)
nchar(df1[,grep("JUNCTION_A",names(df1))])
df1$len1 <- nchar(df1[,grep("JUNCTION_A",names(df1))])
df2 <- subset(df1,df1$group=="CD8")
skewness(df2$len1)
kurtosis(df2$len1)
df2 <- subset(df1,df1$group=="IFN")
skewness(df2$len1)
kurtosis(df2$len1)
df1$len1 <- nchar(df1[,grep("JUNCTION_B",names(df1))])
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
validate(
need(nrow(df)>0,
error_message_val1)
)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
names(df1)
nchar(df1[,grep("JUNCTION_A",names(df1))])
df1$len1 <- nchar(df1[,grep("JUNCTION_B",names(df1))])
df2 <- subset(df1,df1$group=="IFN")
skewness(df2$len1)
kurtosis(df2$len1)
df2 <- subset(df1,df1$group=="CD8")
skewness(df2$len1)
kurtosis(df2$len1)
shapiro.test(df2$len)
df2 <- subset(df1,df1$group=="IFN")
skewness(df2$len1)
kurtosis(df2$len1)
shapiro.test(df2$len)
df1$len1 <- nchar(df1[,grep("JUNCTION_A",names(df1))])
df2 <- subset(df1,df1$group=="IFN")
skewness(df2$len1)
kurtosis(df2$len1)
shapiro.test(df2$len)
df2 <- subset(df1,df1$group=="CD8")
skewness(df2$len1)
kurtosis(df2$len1)
shapiro.test(df2$len)
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(TCR.Explore)
m = matrix(NA,ncol=412, nrow=809)
for (j in 1:412){
temp.start = start.ids[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
m = matrix(NA,ncol=412, nrow=809)
for (j in 1:412){
temp.start = start.ids[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
area <- c(1:4, 1:5, 1:6, 1:3)
start.ids <- which(area == 1)
start.ids
dataframe = read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
m = matrix(NA,ncol=412, nrow=809)
head(dataframe)
which(area == 1)
which(area == 2)
which(area == 10)
dataframe = read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
which(dataframe == 10)
which(dataframe == 1)
m = matrix(NA,ncol=412, nrow=809)
for (j in 1:412){
temp.start = dataframe[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
for (j in 1:412){
end.ids <- dim(dataframe)
temp.start = dataframe[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
end.ids <- dim(dataframe)[2]
end.ids
m = matrix(NA,ncol=412, nrow=809)
for (j in 1:412){
end.ids <- dim(dataframe)[2]
temp.start = dataframe[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
m
head*dataframe
head(dataframe)
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
library(shiny); runApp('TCR_Explore_v1.0.R')
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
head(df1)
View(df1)
unique(df1$Indiv.group)[1]
len(unique(df1$Indiv.group))
summary(unique(df1$Indiv.group))
length(unique(df1$Indiv.group))
length(unique(df1$group))
column.length <- length(unique(df1$group))
column.length <- length(unique(df1$Indiv.group))
m = matrix(NA,ncol=412, nrow=column.length)
for (j in 1:412){
end.ids <- dim(dataframe)[2]
temp.start = dataframe[j]
temp.end = end.ids[j]
val <- area[temp.start:temp.end]
m[j, ] = c(val, rep(NA, 809 - length(val)))
}
m
row.length <- length(unique(df1$AJBJ))
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
dataframe[1]
dataframe[2]
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone"))]
df1[2]
df1[1]
df1[df1$cloneCount]
df1$cloneCount
library(shiny); runApp('TCR_Explore_v1.0.R')
