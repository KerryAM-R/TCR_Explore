# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
alpha_mat
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
alpha_mat
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
summary(alpha_mat)
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
# link.lty = lty_mat,
# link.lwd = lwd_mat,
# link.border = border_mat,
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
# link.lwd = lwd_mat,
# link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
# link.lwd = lwd_mat,
# link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
# link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
# link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
lwd_mat = hierarchy
lwd_mat[lwd_mat>0] <- "x"
lwd_mat[rownames(lwd_mat) %in% input$string.data.circ.order & lwd_mat=="x"] <- input$thickness.chord.line
lwd_mat[!rownames(lwd_mat) %in% input$string.data.circ.order & lwd_mat=="x"] <- 0
lwd_mat[lwd_mat==0] <- 1
# # boarder colour
border_mat <- hierarchy
border_mat[border_mat>0] <- 1
border_mat[rownames(border_mat) %in% input$string.data.circ.order & border_mat==1] <- input$colour.chord.line
border_mat[!rownames(border_mat) %in% input$string.data.circ.order & border_mat==1] <- 0
border_mat[border_mat==0] <- NA
border_mat
# line type
lty_mat = hierarchy
lty_mat[lty_mat>0] <- input$line.chord.type
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
lty_mat[lty_mat>0] <- 2
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
# line type
lty_mat = hierarchy
lty_mat[lty_mat>0] <- 2
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
lty_mat[lty_mat>0] <- 1
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# line type
lty_mat = hierarchy
lty_mat[lty_mat>0] <- 1
lty_mat
lty_mat[lty_mat>0] <- 0.1
lty_mat
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
link.lwd = lwd_mat,
# link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
# link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
lty_mat[lty_mat>0] <- 3
lty_mat
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 0.1
# alpha_mat[rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$selected.chord.transparacy
# alpha_mat[!rownames(alpha_mat) %in% input$string.data.circ.order & alpha_mat==1] <- input$unselected.chord.transparacy
max(alpha_mat)
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
# link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
alpha_mat[alpha_mat>0] <- 1
alpha_mat
alpha_mat[rownames(alpha_mat) %in% "AV12-1" & alpha_mat==1] <- 0.1
alpha_mat
alpha_mat[!rownames(alpha_mat) %in% "AV12-1" & alpha_mat==1] <- 0.9
alpha_mat
lwd_mat = hierarchy
lwd_mat[lwd_mat>0] <- "x"
lwd_mat = hierarchy
lwd_mat[lwd_mat>0] <- "x"
lwd_mat[rownames(lwd_mat) %in% "AV12-1" & lwd_mat=="x"] <- 3
lwd_mat[!rownames(lwd_mat) %in% "AV12-1" & lwd_mat=="x"] <- 0
lwd_mat[lwd_mat==0] <- 1
# # boarder colour
border_mat <- hierarchy
border_mat[border_mat>0] <- 1
border_mat[rownames(border_mat) %in% "AV12-1" & border_mat==1] <- "orange"
border_mat[!rownames(border_mat) %in% "AV12-1" & border_mat==1] <- 0
border_mat[border_mat==0] <- NA
border_mat
# line type
lty_mat = hierarchy
lty_mat[lty_mat>0] <- 3
lty_mat
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 1
alpha_mat
alpha_mat[rownames(alpha_mat) %in% "AV12-1" & alpha_mat==1] <- 0.1
alpha_mat[!rownames(alpha_mat) %in% "AV12-1" & alpha_mat==1] <- 0.9
alpha_mat
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
lwd_mat = hierarchy
lwd_mat[lwd_mat>0] <- "x"
lwd_mat[rownames(lwd_mat) %in% "AV12-1" & lwd_mat=="x"] <- 3
lwd_mat[!rownames(lwd_mat) %in% "AV12-1" & lwd_mat=="x"] <- 0
lwd_mat[lwd_mat==0] <- 1
lwd_mat
lwd_mat = hierarchy
lwd_mat
lwd_mat[rownames(lwd_mat) %in% "AJ20" & lwd_mat=="x"] <- 3
lwd_mat
lwd_mat
lwd_mat[lwd_mat>0] <- "x"
lwd_mat[rownames(lwd_mat) %in% "AJ20" & lwd_mat=="x"]
lwd_mat[rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"]
lwd_mat[rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"] <- 3
lwd_mat
lwd_mat[!rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"] <- 0
# lwd_mat[lwd_mat==0] <- 1
lwd_mat
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
lwd_mat[!rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"] <- 1
lwd_mat = hierarchy
lwd_mat
lwd_mat[lwd_mat>0] <- "x"
lwd_mat[rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"]
lwd_mat[rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"] <- 3
lwd_mat
lwd_mat[!rownames(lwd_mat) %in% "AV30" & lwd_mat=="x"] <- 1
# lwd_mat[lwd_mat==0] <- 1
lwd_mat
# # boarder colour
border_mat <- hierarchy
border_mat[rownames(border_mat) %in% "AV30" & border_mat==1] <- "orange"
border_mat[!rownames(border_mat) %in% "AV30" & border_mat==1] <- 0
border_mat[border_mat==0] <- NA
border_mat
# # boarder colour
border_mat <- hierarchy
border_mat[border_mat>0] <- 1
border_mat[rownames(border_mat) %in% "AV30" & border_mat==1] <- 1
border_mat[!rownames(border_mat) %in% "AV30" & border_mat==1] <- 0
border_mat[border_mat==0] <- NA
border_mat
# line type
lty_mat = hierarchy
lty_mat[lty_mat>0] <- 3
lty_mat
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 1
alpha_mat
alpha_mat[rownames(alpha_mat) %in% "AV30" & alpha_mat==1] <- 0.1
alpha_mat[!rownames(alpha_mat) %in% "AV30" & alpha_mat==1] <- 0.9
alpha_mat
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 1
alpha_mat
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = 1,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = as.matrix(alpha_mat),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
alpha_mat[!rownames(alpha_mat) %in% "AV30" & alpha_mat==0] <- NA
alpha_mat
circos.clear()
alpha_mat[!rownames(alpha_mat) %in%  alpha_mat==0] <- NA
alpha_mat
alpha_mat[!rownames(alpha_mat) %in% alpha_mat==0] <- NA
alpha_mat
alpha_mat[!rownames(alpha_mat) %in% alpha_mat==0] <- NA
alpha_mat
alpha_mat[rownames(alpha_mat) %in% alpha_mat==0] <- NA
alpha_mat
# transparancy
alpha_mat <- hierarchy
alpha_mat[alpha_mat>0] <- 1
alpha_mat
alpha_mat[rownames(alpha_mat) %in% "AV30" & alpha_mat==1] <- 0.1
alpha_mat[!rownames(alpha_mat) %in% "AV30" & alpha_mat==1] <- 0.9
alpha_mat[alpha_mat==0] <- NA
alpha_mat
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = as.matrix(alpha_mat),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = c(0.1,1),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
?chordDiagram
chordDiagramFromMatrix(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = c(0.1,1),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagramFromMatrix(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagramFromMatrix(hierarchy, annotationTrack = "grid", grid.col = "red",
order = df.col.2$V1,
link.lty = lty_mat,
link.lwd = lwd_mat,
link.border = border_mat,
# transparency = alpha_mat,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
runApp('TCR_Explore_v1.0.R')
install.packages("circlize")
install.packages("circlize")
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
.rs.listInstalledPackages()
install.packages("broom")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("motifStack")
BiocManager::install("motifStack", force = T)
BiocManager::install("flowCore")
BiocManager::install("flowCore", force = T)
BiocManager::install("muscle")
library("devtools")
install_github("jokergoo/ComplexHeatmap")
install_github("mgledi/DiffLogo")
install.packages("circlize")
library(shiny); runApp('TCR_Explore_v1.0.R')
