mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
# a <- as.data.frame(unique(names(mat)))
#   a$V1 <- distinctColorPalette(dim(a)[1])
df.x <- make_comb_mat(mat)
ht = draw(UpSet(df.x,
row_names_gp =  gpar(fontfamily = 'serif'),
column_names_gp = gpar(fontfamily = 'serif'),
top_annotation = upset_top_annotation(df.x,
annotation_name_gp = gpar(fontfamily = 'serif')
),
right_annotation = upset_right_annotation(df.x,
annotation_name_gp = gpar(fontfamily = 'serif')),
set_order  = c(input$order.of.group)
), padding = unit(c(20, 20, 20, 20), "mm"))
od = column_order(ht)
cs = comb_size(df.x)
decorate_annotation("intersection_size", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = 12, fontfamily = 'serif')
) })
}
output$UpSet.plot <- renderPlot({
withProgress(message = 'Figure is being generated...',
detail = '', value = 0, {
test_fun()
})
upset.parameters()
})
upset.datatable1 <- reactive({
df <- input.data2();
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
head(df)
unique.df <- unique(df[c(input$upset.select,input$upset.group.select)])
names(unique.df) <- c("chain","group")
unique.df$cloneCount <- 1
mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
mat
})
output$upset.datatable <- DT::renderDataTable( {
datatable(upset.datatable1(), extensions = "Buttons", options = list(searching = TRUE,
ordering = TRUE,
buttons = c('copy','csv', 'excel'),
dom = 'Bfrtip',
pageLength=2,
lengthMenu=c(2,5,10,20,50,100),
scrollX = TRUE
))
}, server = FALSE)
output$downloadPlot_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_",gsub("/", "-", x), ".pdf", sep = "")
}, content = function(file) {
pdf(file, width=input$width_upset,height=input$height_upset, onefile = FALSE) # open the pdf device
print(upset.parameters())
dev.off()}, contentType = "application/pdf" )
output$downloadPlotPNG_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_", gsub("/", "-", x), ".png", sep = "")
},
content = function(file) {
png(file, width = input$width_png_upset, height = input$height_png_upset, res = input$resolution_PNG_upset)
print(upset.parameters())
dev.off()}, contentType = "application/png" # MIME type of the image
)
# QC MiXCR and IMGT files -----
input.data_IMGT.xls <- reactive({switch(input$dataset_IMGT,"ab-test-data" = test.data_ab.xls(), "gd-test-data" = test.data_gd.xls(),"own" = own.data.IMGT())})
test.data_ab.xls <- reactive({
dataframe = read_excel("test-data/IMGT/T00016.xls")
})
own.data.IMGT <- reactive({
inFile4 <- input$file_IMGT1
if (is.null(inFile4)) return(NULL)
else {
dataframe <- read_excel(
inFile4$datapath
)}
})
input.data_MiXCR.txt <- reactive({switch(input$dataset_IMGT,"ab-test-data" = test.data_ab.txt(),"gd-test-data" = test.data_gd.txt(),"own" = own.data.MiXCR())})
test.data_ab.txt <- reactive({
dataframe = read.table("test-data/MiXCR/SJS_TEN/T00016.txt",sep="\t",header=T)
})
test.data_gd.txt <- reactive({
dataframe = read.table("test-data/MiXCR/SJS_TEN/T00016.txt",sep="\t",header=T)
})
own.data.MiXCR <- reactive({
inFile5 <- input$file_IMGT2
if (is.null(inFile5)) return(NULL)
else {
dataframe <- read.table(
inFile5$datapath,
header=inFile5$header_IMGT2,
sep=input$sep_IMGT2,
quote=input$quote_IMGT2)}
})
# combining MiXCR and IMGT -----
input.data.IMGT.MiXCR <- reactive({switch(input$dataset_IMGT,"ab-test-data" = test.data.ab.csv(), "gd-test-data" = test.data.gd.csv(),"own" = own.data.csv())})
test.data.ab.csv <- reactive({
dataframe = read.csv("test-data/QC/merged_IMGT_table2021.08.01.csv",header=T)
})
test.data.gd.csv <- reactive({
dataframe = read.csv("test-data/QC/merged_IMGT_table2021.08.01.csv",header=T)
})
own.data.csv <- reactive({
inFile6 <- input$file_IMGT.MiXCR
if (is.null(inFile6)) return(NULL)
else {
dataframe <- read.csv(
inFile6$datapath)}
})
# unmerged IMGT df
output$unmerged_chain1 <- DT::renderDataTable(escape = FALSE,options = list(lengthMenu = c(2,5,10,20,50,100), pageLength = 2, scrollX = TRUE),{
df <- input.data_IMGT.xls();
df_chain1 <- as.data.frame(df)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('TR','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('TR','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('TR','',df_chain1$`D-GENE and allele`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
df_chain1
})
output$unmerged_chain2 <- DT::renderDataTable(escape = FALSE, options = list(lengthMenu = c(2,5,10,20,50,100), pageLength = 2, scrollX = TRUE),{
df <- input.data_MiXCR.txt();
df <- as.data.frame(df)
df
})
IMGT <- reactive({
df_chain1 <- input.data_IMGT.xls();
df_chain1 <- as.data.frame(df_chain1)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[(]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[)]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' or ',', ',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' ','',df_chain1$`V-GENE and allele`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
# MiXCR -----
df_chain2 <- input.data_MiXCR.txt();
df_chain2 <- as.data.frame(df_chain2)
df <- merge(df_chain1,df_chain2, by.x="Sequence ID",by.y="ID",all=T)
df$V.Gene.IMGT <- df$`V-GENE and allele`
df$V.Gene.IMGT <- gsub("[*]0.","",df$V.Gene.IMGT)
df$V.Gene.IMGT <- gsub("[*]0..","",df$V.Gene.IMGT)
df$V.Gene.IMGT <- gsub("/","",df$V.Gene.IMGT)
df$V.Gene.IMGT <- gsub(",.*", "", df$V.Gene.IMGT)
df$V.Gene.IMGT <- gsub(" ", "", df$V.Gene.IMGT)
df$V.Gene.IMGT <- gsub("TR", "", df$V.Gene.IMGT)
df$`J-GENE and allele` <- gsub('TR','',df$`J-GENE and allele`)
df$`V-GENE and allele` <- gsub('TR','',df$`V-GENE and allele`)
df$`D-GENE and allele` <- gsub('TR','',df$`D-GENE and allele`)
df <- mutate(df, CDR3_sequence_match_nt = ifelse(df$JUNCTION==df$nSeqCDR3,"matched","different"),
CDR3_sequence_match_aa = ifelse(df$`JUNCTION (AA)`==df$aaSeqCDR3,"matched","different"),
Matched_TRV = ifelse(df$V.Gene.IMGT==df$bestVHit,"matched","different"))
df$clone_quality <- NA
df$comments <- NA
df
})
output$merged_IMGT <- DT::renderDataTable(escape = FALSE, options = list(lengthMenu = c(2,5,10,20,50,100), pageLength = 5, scrollX = TRUE),{
IMGT()
})
output$downloadTABLE2 <- downloadHandler(
filename = function(){
paste("merged_IMGT_table",gsub("-", ".", Sys.Date()),".csv", sep = "")
},
content = function(file){
write.csv(IMGT(),file, row.names = FALSE)
})
# # QC after merged MiXCR.IMGT ----
# chain_merge <- reactive({
#   df1 <- input.data.IMGT.MiXCR();
#   df1 <- as.data.frame(df1)
#   df <- subset(df1,df1$clone_quality=="pass")
#   df <- as.data.frame(df)
#
#   df2 <- df[c(1:7,11,22,13)]
#   y = dim(df2)[2]-1
#   y
#   df2$V.Gene.IMGT <- gsub("TR","",df2$V.Gene.IMGT)
#   df2$cloneCount <- 1
#
#   if (input$chain=="ab") {
#
#     df_name2 <- as.data.frame(do.call(rbind, strsplit(as.character(df2$Sequence.ID), "_")))
#     head(df_name2)
#     df_name3 <- as.data.frame(do.call(rbind, strsplit(as.character(df2$Sequence.ID), "-")))
#     df_name4 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name2$V1), "-")))
#     df_name3$V1 <- gsub("A","",df_name3$V1)
#     df_name3$V1 <- gsub("B","",df_name3$V1)
#
#     df_name5 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name3$V1), "[.]")))
#     head(df_name5)
#     df2$ID <- df_name2$V1
#
#     df2$Indiv.group <- df_name3$V1
#     df2$Indiv <-df_name5$V1
#     df2$group <- df_name5$V2
#     df2$clone <- df_name4$V2
#     names(df2)
#
#     dim(df)
#
#     chain1 <- df2[grep("A",df2$V.Gene.IMGT),]
#     chain2 <- df2[grep("B",df2$V.Gene.IMGT),]
#     # paste chain into name
#     chain1$ID <- gsub("A-","-",chain1$ID)
#     names(chain1)[1:y] <- paste(names(chain1)[1:y],"A",sep="_")
#     head(chain1)
#     chain2$ID <- gsub("B-","-",chain2$ID)
#     names(chain2)[1:y] <- paste(names(chain2)[1:y],"B",sep="_")
#
#     x <- names(chain2)[10:dim(chain2)[2]]
#
#     merged_chain <- merge(chain1,chain2,by =x)
#     head(merged_chain)
#     merged_chain2 <- merged_chain[ , -which(names(merged_chain) %in% c("ID","Sequence.ID_A","Sequence.ID_B","V.DOMAIN.Functionality_A","V.DOMAIN.Functionality_B","D.GENE.and.allele_A","JUNCTION.frame_A","JUNCTION.frame_B"))]
#     names(merged_chain2)
#     dat <- merged_chain2
#     dat$AJ <- paste(dat$V.Gene.IMGT_A,".",dat$J.GENE.and.allele_A,sep="")
#     dat$BJ <- paste(dat$V.Gene.IMGT_B,".",dat$J.GENE.and.allele_B,sep="")
#     dat$AJ <- gsub("[*]0.","",dat$AJ)
#     dat$BJ <- gsub("[*]0.","",dat$BJ)
#     dat$AJ <- gsub("TR","",dat$AJ)
#     dat$AJBJ <- paste(dat$AJ,"_",dat$BJ,sep="")
#     dat$AJ_aCDR3 <- paste(dat$AJ,dat$JUNCTION..AA._A,sep="_")
#     dat$BJ_bCDR3 <- paste(dat$BJ,dat$JUNCTION..AA._B,sep="_")
#     dat$AJ_aCDR3_BJ_bCDR3 <- paste(dat$AJ_aCDR3,dat$BJ_bCDR3,sep=" & ")
#     head(dat)
#
#     dat
#
#   }
#   else {
#     df_name2 <- as.data.frame(do.call(rbind, strsplit(as.character(df2$Sequence.ID), "_")))
#     df_name3 <- as.data.frame(do.call(rbind, strsplit(as.character(df2$Sequence.ID), "-")))
#     df_name4 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name2$V1), "-")))
#     df_name3$V1 <- gsub("G","",df_name4$V1)
#     df_name3$V1 <- gsub("D","",df_name4$V1)
#     df_name5 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name3$V1), "[.]")))
#     df2$ID <- df_name2$V1
#     df2$Indiv.group <- df_name3$V1
#     df2$Indiv <-df_name5$V1
#     df2$group <- df_name5$V2
#     df2$clone <- df_name4$V2
#     chain1 <- df2[grep("G",df2$V.Gene.IMGT),]
#     chain2 <- df2[grep("D",df2$V.Gene.IMGT),]
#     # paste chain into name
#     chain1$ID <- gsub("G-",".",chain1$ID)
#     names(chain1)[1:y] <- paste(names(chain1)[1:y],"G",sep="_")
#     chain2$ID <- gsub("D-",".",chain2$ID)
#     names(chain2)[1:y] <- paste(names(chain2)[1:y],"D",sep="_")
#     x <- names(chain2)[10:dim(chain2)[2]]
#     merged_chain <- merge(chain1,chain2,by=x)
#     merged_chain2 <- merged_chain[ , -which(names(merged_chain) %in% c("ID","Sequence.ID_G","Sequence.ID_D","V.DOMAIN.Functionality_G","V.DOMAIN.Functionality_D","D.GENE.and.allele_G","JUNCTION.frame_G","JUNCTION.frame_D"))]
#     dat <- merged_chain2
#     head(dat)
#     dat$GJ <- paste(dat$V.Gene.IMGT_G,"-",dat$J.GENE.and.allele_G,sep="")
#
#     dat$DJ <- paste(dat$V.Gene.IMGT_D,"-",dat$J.GENE.and.allele_D,sep="")
#     dat$GJ <- gsub("[*]0.","",dat$GJ)
#     dat$DJ <- gsub("[*]0.","",dat$DJ)
#     dat$GJDJ <- paste(dat$GJ,"_",dat$DJ,sep="")
#     dat$GJ_gCDR3 <- paste(dat$GJ,dat$JUNCTION..AA._G,sep="_")
#     dat$DJ_dCDR3 <- paste(dat$DJ,dat$JUNCTION..AA._D,sep="_")
#     dat$GJ_gCDR3_DJ_dCDR3 <- paste(dat$AJ_aCDR3,dat$BJ_bCDR3,sep=" & ")
#
#
#     dat
#
#   }
# })
# output$chain_table <- DT::renderDataTable(escape = FALSE, options = list(lengthMenu = c(2,5,10,20,50,100), pageLength = 5, scrollX = TRUE),{
#   df1 <- input.data.IMGT.MiXCR();
#   df1 <- as.data.frame(df1)
#
#   a <- subset(df1 ,is.na(df1$clone_quality)==TRUE)
#   if (dim(a)[1]>0) {
#     df <- as.data.frame("please complete QC analysis")
#     names(df) <- " "
#     df
#   }
#   else {
#     df <- chain_merge()
#     df <- as.data.frame(df)
#     df
#   }
# })
#
# output$downloadTABLE3 <- downloadHandler(
#   filename = function(){
#     paste("paired.file",gsub("-", ".", Sys.Date()),".csv", sep = "")
#   },
#   content = function(file){
#     df <- chain_merge()
#     df <- as.data.frame(df)
#     write.csv(df,file, row.names = FALSE)
#   } )
#
# output$names.in.file2 <- renderPrint( {
#   df <- chain_merge()
#   df <- as.data.frame(df)
#   names(df)
#
# })
# output$chain_table2 <- DT::renderDataTable(escape = FALSE, options = list(autoWidth = FALSE, lengthMenu = c(2,5,10,20,50,100), pageLength = 5, scrollX = TRUE),{
#   df1 <- input.data.IMGT.MiXCR();
#   df1 <- as.data.frame(df1)
#
#   a <- subset(df1 ,is.na(df1$clone_quality)==TRUE)
#   if (dim(a)[1]>0) {
#     df <- as.data.frame("please complete QC analysis")
#     names(df) <- " "
#     df
#
#   }
#   else {
#     df <- chain_merge()
#     df <- as.data.frame(df)
#
#     your_list <- c("cloneCount",input$string.data2)
#     your_list_df <- as.data.frame((unlist(strsplit(your_list, ', '))))
#     names(your_list_df) <- "V1"
#     your_list_df
#     df.your_list <- df[names(df) %in% your_list_df$V1]
#     names.df <- names(df.your_list[ , -which(names(df.your_list) %in% "cloneCount")])
#
#     df2 <- as.data.frame(ddply(df.your_list,names.df,numcolwise(sum)))
#     df2
#
#   }
# })
# output$downloadTABLE4 <- downloadHandler(
#   filename = function(){
#     paste("summarised_CDR3_chain",gsub("-", ".", Sys.Date()),".csv", sep = "")
#   },
#   content = function(file){
#     df <- chain_merge()
#     df <- as.data.frame(df)
#
#     your_list <- c("cloneCount",input$string.data2)
#     your_list_df <- as.data.frame((unlist(strsplit(your_list, ', '))))
#     names(your_list_df) <- "V1"
#     your_list_df
#     df.your_list <- df[names(df) %in% your_list_df$V1]
#     names.df <- names(df.your_list[ , -which(names(df.your_list) %in% "cloneCount")])
#
#     df2 <- as.data.frame(ddply(df.your_list,names.df,numcolwise(sum)))
#     df2
#     write.csv(df2,file, row.names = FALSE)
#   } )
#
#
}
shinyApp(ui, server)
runApp('~/Documents/PhD_2018-2021/R_files/TCR_Explore/TCR_Explore_v1.0.R')
server = source("server.R")
ui = source("ui.R")
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
ui = source("ui.R")
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
shinyApp(ui, server)
runApp()
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
shinyApp(ui, server)
function(input, output, session) {
df <- reactive({
inFiles <- input$fileIn
df <- data.frame()
if (is.null(inFiles))
return(NULL)
for (i in seq_along(inFiles$datapath)) {
tmp <- read.csv(inFiles$datapath[i], header = FALSE)
df <- rbind(df, tmp)
}
df
})
output$tbl <- DT::renderDataTable(
df()
)
output$tbl2 <- DT::renderDataTable(
input$fileIn
)
output$results = renderPrint({
input$mydata
})
}
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(DT)
shinyServer(function(input, output, session) {
df <- reactive({
inFiles <- input$fileIn
df <- data.frame()
if (is.null(inFiles))
return(NULL)
for (i in seq_along(inFiles$datapath)) {
tmp <- read.csv(inFiles$datapath[i], header = FALSE)
df <- rbind(df, tmp)
}
df
})
output$tbl <- DT::renderDataTable(
df()
)
output$tbl2 <- DT::renderDataTable(
input$fileIn
)
output$results = renderPrint({
input$mydata
})
})
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
ui = source("ui.R")
server = source("server.R")
shinyApp(ui, server)
server = source("server.R")
server
shinyApp(ui, server)
x <- function(input, output, session) {
df <- reactive({
inFiles <- input$fileIn
df <- data.frame()
if (is.null(inFiles))
return(NULL)
for (i in seq_along(inFiles$datapath)) {
tmp <- read.csv(inFiles$datapath[i], header = FALSE)
df <- rbind(df, tmp)
}
df
})
output$tbl <- DT::renderDataTable(
df()
)
output$tbl2 <- DT::renderDataTable(
input$fileIn
)
output$results = renderPrint({
input$mydata
})
}
shinyApp(ui, x)
runApp()
ui = source("ui.R")
server = source("server.R")
server
shinyApp(ui, x)
ui = source("ui.R")
server = source("server.R")
server
shinyApp(ui, x)
?addResourcePath()
runApp('~/Documents/PhD_2018-2021/R_files/TCR_Explore/TCR_Explore_v1.0.R')
library(TCR.Explore)
library(shiny); runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
runApp('~/Documents/PhD_2018-2021/R_files/TCR_Explore/TCR_Explore_local.alignment_v1.0.R')
runApp('TCR_Explore_local.alignment_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
