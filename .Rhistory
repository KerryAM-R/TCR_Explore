paste(names(df1) %in% "Drug","_",df1$Patient_ID,sep="")
paste(df1[names(df1) %in% "Drug"],"_",df1$Patient_ID,sep="")
df1[names(df1) %in% "Drug"]
df$V1 <- df1[names(df1) %in% "Drug"]
df1$V1 <- df1[names(df1) %in% "Drug"]
df1$V2 <- df1[names(df1) %in% "Patient_ID"]
df1$V1 <- df1[names(df1) %in% "Drug"]
df1$V2 <- df1[names(df1) %in% "Patient_ID"]
paste(df1$V1,"_",df1$V2,sep="")
df1
df1$V1 <- df1[names(df1) %in% "Drug"]
df1
df1$V1 <- df1[names(df1) %in% "Drug"]
df1
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
df1$V1 <- df1[names(df1) %in% "Drug"]
df1
names(df1)
df1$V2 <- df1[names(df1) %in% "Patient_ID"]
paste(df1$V1,"_",df1$V2,sep="")
names(df1)
head(df1)
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
df1$V1 <- df1[names(df1) %in% "Drug"]
names(df1)
df1$V2 <- df1[names(df1) %in% "Patient_ID"]
head(df1)
df1[names(df1) %in% "Patient_ID"]
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
df1[names(df1) %in% "Patient_ID"]
df1$V1 <- df1[names(df1) %in% "Drug"]
names(df1)
df1$V2 <- df1[names(df1) %in% "Patient_ID"]
head(df1)
paste(df1$V1,"_",df1$V2,sep="")
paste(df1[names(df1) %in% "Drug"],"_",df1[names(df1) %in% "Patient_ID"],sep="")
df1[names(df1) %in% "Patient_ID"]
df1[names(df1) %in% "Drug"]
paste(df1[names(df1) %in% "Patient_ID"],df1[names(df1) %in% "Drug"])
paste(as.data.frame(df1[names(df1) %in% "Patient_ID"]),as.data.frame(df1[names(df1) %in% "Drug"]))
paste(as.list(df1[names(df1) %in% "Patient_ID"]),as.data.frame(df1[names(df1) %in% "Drug"]))
paste(as.list(df1[names(df1) %in% "Patient_ID"]),as.list(df1[names(df1) %in% "Drug"]))
paste(as.list(df1[names(df1) %in% "Drug"]),as.list(df1[names(df1) %in% "Patient_ID"]))
names(df1)
head(df1)
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
paste(as.list(df1[names(df1) %in% "Drug"]),as.list(df1[names(df1) %in% "Patient_ID"]))
V1 <-
paste(as.list(df1[names(df1) %in% "Drug"]),as.list(df1[names(df1) %in% "Patient_ID"]))
V1 <- df1[names(df1) %in% "Drug"]
V1
V2 <- df1[names(df1) %in% "Patient_ID"]
cbind(V1,V2)
V1V2 <- cbind(V1,V2)
names(V1V2) <- c("V1","V2")
paste(V1V2$V1,V1V2$V2)
paste(V1V2$V1,V1V2$V2,sep="_")
df1$selected.groups <- paste(V1V2$V1,V1V2$V2,sep="_")
head(df1)
df1$selected.groups <- paste(V1V2$V1,V1V2$V2,sep="_")
df.group <- unique(df1[names(df1) %in% "selected.groups"])
names(df.group) <- "V1"
column.length <- length(df.group$V1)
column.length
df.group2 <- unique(df1[names(df1) %in% "AVJ_aCDR3_BVDJ_bCDR3"])
names(df.group2) <- "V1"
row.length <- length(df.group2$V1)
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
samps <- df.group$V1
for (j in 1:column.length){
df2 <- subset(df1,df1$selected.groups==samps[j])
m[,j] <- c(df2$cloneCount, rep(NA, row.length - length(df2$cloneCount)))
}
m <- as.data.frame(m)
names(m) <- samps
head(m)
m
column.length <- length(df.group$V1)
column.length
df.group2 <- unique(df1[names(df1) %in% "AVJ_aCDR3_BVDJ_bCDR3"])
names(df.group2) <- "V1"
row.length <- length(df.group2$V1)
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
samps <- df.group$V1
for (j in 1:column.length){
df2 <- subset(df1,df1$selected.groups==samps[j])
m[,j] <- c(df2$cloneCount, rep(NA, row.length - length(df2$cloneCount)))
}
m <- as.data.frame(m)
names(m) <- samps
head(m)
m
a <- matrix(nrow=1,ncol=dim(m)[2])
b <- matrix(nrow=1,ncol=dim(m)[2])
d <- matrix(nrow=1,ncol=dim(m)[2])
for( i in 1:dim(m)[2]) {
samp <- m[,i]
samp <- na.omit(samp)
a[,i] <- diversity(samp,"invsimpson")
b[,i] <- sum(samp)
d[,i] <- nrow(as.data.frame(samp))
}
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1
df_name <- as.data.frame(do.call(rbind, strsplit(as.character(names(m)), "_")))
df_name$both <- paste(df_name$V1,df_name$V2,sep = "_")
head(df_name)
names(df_name) <- c("Drug","Patient_ID","both")
a2 <- as.data.frame(t(a1))
names(a2) <- c("inv.simpson.index","total # clones","unique # clones")
a2
both <- cbind(a2,df_name)
as.data.frame(both)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
V1 <- df1[names(df1) %in% "Drug"]
V1
V2 <- df1[names(df1) %in% "Patient_ID"]
V1V2 <- cbind(V1,V2)
names(V1V2) <- c("V1","V2")
df1$selected.groups <- paste(V1V2$V1,V1V2$V2,sep="_")
df.group <- unique(df1[names(df1) %in% "selected.groups"])
names(df.group) <- "V1"
column.length <- length(df.group$V1)
column.length
df.group2 <- unique(df1[names(df1) %in% "AVJ_aCDR3_BVDJ_bCDR3"])
names(df.group2) <- "V1"
row.length <- length(df.group2$V1)
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
samps <- df.group$V1
for (j in 1:column.length){
df2 <- subset(df1,df1$selected.groups==samps[j])
m[,j] <- c(df2$cloneCount, rep(NA, row.length - length(df2$cloneCount)))
}
m <- as.data.frame(m)
names(m) <- samps
head(m)
m
a <- matrix(nrow=1,ncol=dim(m)[2])
b <- matrix(nrow=1,ncol=dim(m)[2])
d <- matrix(nrow=1,ncol=dim(m)[2])
for( i in 1:dim(m)[2]) {
samp <- m[,i]
samp <- na.omit(samp)
a[,i] <- diversity(samp,"invsimpson")
b[,i] <- sum(samp)
d[,i] <- nrow(as.data.frame(samp))
}
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1
df_name <- as.data.frame(do.call(rbind, strsplit(as.character(names(m)), "_")))
df_name$both <- paste(df_name$V1,df_name$V2,sep = "_")
head(df_name)
names(df_name) <- c("Drug","Patient_ID","both")
a2 <- as.data.frame(t(a1))
names(a2) <- c("inv.simpson.index","total # clones","unique # clones")
a2
both <- cbind(a2,df_name)
as.data.frame(both)
dat <- both
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dat <- both
conf <- 0.95
dat <- dat[order(dat$V1),]
dat <- dat[order(dat %in% "Drug"),]
ve <- ifelse(input$varequal == 'y', TRUE, FALSE)
dat[order(dat %in% "Drug"),]
dat[order(names(dat) %in% "Drug"),]
order(names(dat) %in% "Drug")
order(df[names(dat) %in% "Drug"],)
order(df[names(dat) %in% "Drug"])
df[names(dat) %in% "Drug"]
dat[names(dat) %in% "Drug"]
order(dat[names(dat) %in% "Drug"])
dat[order(dat[names(dat) %in% "Drug"]),]
runApp('TCR_Explore_v1.0.R')
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
head(dataframe)
df.names <-   dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) %in% c("Drug","Patient_ID"."AVJ_aCDR3_BVDJ_bCDR3") ,numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
names(df.names) %in% c("Drug","Patient_ID"."AVJ_aCDR3_BVDJ_bCDR3")
names(df.names) %in% c("Drug","Patient_ID","AVJ_aCDR3_BVDJ_bCDR3")
df1 <- ddply(dataframe,names(df.names) %in% c("Drug","Patient_ID","AVJ_aCDR3_BVDJ_bCDR3") ,numcolwise(sum))
df1 <- ddply(dataframe,c("Drug","Patient_ID","AVJ_aCDR3_BVDJ_bCDR3"),numcolwise(sum))
names(df1)
names(df.names) %in% c("Drug","Patient_ID","AVJ_aCDR3_BVDJ_bCDR3")
df1 <- ddply(dataframe,c("Drug","Patient_ID","AVJ_aCDR3_BVDJ_bCDR3"),numcolwise(sum))
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
V1 <- df1[names(df1) %in% "Drug"]
V1
V2 <- df1[names(df1) %in% "Patient_ID"]
V1V2 <- cbind(V1,V2)
names(V1V2) <- c("V1","V2")
df1$selected.groups <- paste(V1V2$V1,V1V2$V2,sep="_")
df.group <- unique(df1[names(df1) %in% "selected.groups"])
names(df.group) <- "V1"
column.length <- length(df.group$V1)
column.length
df.group2 <- unique(df1[names(df1) %in% "AVJ_aCDR3_BVDJ_bCDR3"])
names(df.group2) <- "V1"
row.length <- length(df.group2$V1)
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
samps <- df.group$V1
for (j in 1:column.length){
df2 <- subset(df1,df1$selected.groups==samps[j])
m[,j] <- c(df2$cloneCount, rep(NA, row.length - length(df2$cloneCount)))
}
m <- as.data.frame(m)
names(m) <- samps
head(m)
m
a <- matrix(nrow=1,ncol=dim(m)[2])
b <- matrix(nrow=1,ncol=dim(m)[2])
d <- matrix(nrow=1,ncol=dim(m)[2])
for( i in 1:dim(m)[2]) {
samp <- m[,i]
samp <- na.omit(samp)
a[,i] <- diversity(samp,"invsimpson")
b[,i] <- sum(samp)
d[,i] <- nrow(as.data.frame(samp))
}
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1
df_name <- as.data.frame(do.call(rbind, strsplit(as.character(names(m)), "_")))
df_name$both <- paste(df_name$V1,df_name$V2,sep = "_")
head(df_name)
names(df_name) <- c("Drug","Patient_ID","both")
a2 <- as.data.frame(t(a1))
names(a2) <- c("inv.simpson.index","total # clones","unique # clones")
a2
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dat <- read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
dat <- as.data.frame(dat)
dat <- as.data.frame(dat)
col.gg
col.gg <- gg_fill_hue(length(num))
col.gg
gg_fill_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
col.gg <- gg_fill_hue(length(num))
col.gg
df <- as.data.frame(ddply(dat,(c(input$group_column,input$pie_chain)),numcolwise(sum)))
names(df) <- c("group","chain","cloneCount")
num <- unique(df$chain)
dat <- read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
dat <- as.data.frame(dat)
df <- as.data.frame(ddply(dat,(c("group","AV")),numcolwise(sum)))
names(df) <- c("group","chain","cloneCount")
num <- unique(df$chain)
col.gg <- gg_fill_hue(length(num))
col.gg
cols <- col.gg
palette <- cols
a <- unique(df$chain)
df$chain <- factor(df$chain,levels = a,labels=a)
df <- transform(df, percent = ave(cloneCount, group, FUN = prop.table))
df
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~df$group,nrow = input$nrow.pie)
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~df$group,nrow = 1)
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~df$group,nrow = 1) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid  = element_blank(),
axis.title.y= element_blank(),
legend.position = input$cir.legend,
legend.text = element_text(size = input$size.circ, family = input$font_type),
legend.title = element_blank(),
axis.title = element_blank()) +
guides(color = "none", size = "none")+
theme(strip.text = element_text(size = input$panel.text.size.pie, family = input$font_type))+
theme(panel.background = element_blank()) +
theme(strip.background =element_rect(fill=input$strip.colour.pie))+
theme(strip.text = element_text(colour = input$strip.text.colour.pie))
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~df$group,nrow = 1)
dat <- read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
gg_fill_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
dat <- as.data.frame(dat)
df <- as.data.frame(ddply(dat,(c("group","AV")),numcolwise(sum)))
names(df) <- c("group","chain","cloneCount")
num <- unique(df$chain)
col.gg <- gg_fill_hue(length(num))
col.gg
cols <- col.gg
palette <- cols
a <- unique(df$chain)
df$chain <- factor(df$chain,levels = a,labels=a)
df <- transform(df, percent = ave(cloneCount, group, FUN = prop.table))
df
df$group <- factor(df[,names(df) %in% input$group_column],levels = input$string.data.pie.order)
df$group <- factor(df[,df$group],levels = input$string.data.pie.order)
df$group <- factor(df$group,levels = input$string.data.pie.order)
df$group <- factor(df$group,levels = unique(df$group) )
df$group
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~df$group,nrow = 1)
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~group,nrow = 1)
## volcano plots
library("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black"))
df
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black"))
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar()
ggplot(df, aes(y=percent, fill=chain)) +
geom_bar()
ggplot(df, aes(y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black"))
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black"))
dat <- read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
gg_fill_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
dat <- as.data.frame(dat)
df <- as.data.frame(ddply(dat,(c("group","AV")),numcolwise(sum)))
## volcano plots
library("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
dat <- read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_210422_KM.csv")
validate(
need(nrow(dat)>0,
error_message_val1)
)
gg_fill_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
dat <- as.data.frame(dat)
df <- as.data.frame(ddply(dat,(c("group","AV")),numcolwise(sum)))
names(df) <- c("group","chain","cloneCount")
num <- unique(df$chain)
col.gg <- gg_fill_hue(length(num))
col.gg
cols <- col.gg
palette <- cols
palette <- cols
a <- unique(df$chain)
df$chain <- factor(df$chain,levels = a,labels=a)
df <- transform(df, percent = ave(cloneCount, group, FUN = prop.table))
df
df$group <- factor(df$group,levels = unique(df$group) )
df$group
df
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette)
ggplot(df, aes(x="", y=percent, fill=chain)) +
geom_bar(width = 1, stat = "identity",aes(colour = "black")) +
scale_fill_manual(values=palette) +
scale_color_manual(values = "black") +
coord_polar("y", start=0) +
facet_wrap(~group,nrow = 1)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
