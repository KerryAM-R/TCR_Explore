names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
chordDiagram(hierarchy)
par(mar = rep(0, 4), cex=1, family = "serif")
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(hierarchy, annotationTrack = "grid", grid.col = grid.col3,
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
hierarchy
chordDiagram(t(hierarchy), annotationTrack = "grid", grid.col = grid.col3,
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(t(hierarchy), annotationTrack = "grid",
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
chordDiagram(hierarchy)
chordDiagram(t(hierarchy))
chordDiagram((hierarchy))
chordDiagram(as.matrix(t(hierarchy)))
head(hierarchy)
head(t(hierarchy))
df <-  head(t(hierarchy))
chordDiagram(df)
df <-  (t(hierarchy))
chordDiagram(df)
df <-  head(t(hierarchy),n=2-)
df <-  head(t(hierarchy),n=20)
chordDiagram(df)
df <-  head(t(hierarchy),n=10)
chordDiagram(df)
df <-  head(t(hierarchy),n=11)
chordDiagram(df)
hierarchy[1:10]
hierarchy[1:11]
hierarchy
df <-  head(t(hierarchy),n=11)
df
chordDiagram(df)
df <-  head(t(hierarchy),n=10)
df
chordDiagram(df)
df <-  (t(hierarchy))[1:10]
df
df <-  (t(hierarchy))[1:10,1:2]
df
chordDiagram(df)
df <-  (t(hierarchy))[1:11,1:2]
df
chordDiagram(df)
df <-  (t(hierarchy))[c(1:10,12),1:2]
df
chordDiagram(df)
df <-  (t(hierarchy))[c(11:20),1:2]
df
chordDiagram(df)
df <-  (t(hierarchy))[c(11:30),1:2]
df <-  (t(hierarchy))[c(11:31),1:2]
df
length(hierarchy)
length(hierarchy)/2
df <-  (t(hierarchy))[c(11:29),1:2]
length(hierarchy)/2
chordDiagram(df)
df <-  (t(hierarchy))[c(11:21),1:2]
chordDiagram(df)
df <-  (t(hierarchy))[c(11:21),1:2]
length(hierarchy)/2
chordDiagram(df)
df <-  (t(hierarchy))[c(11:20),1:2]
length(hierarchy)/2
chordDiagram(df)
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRD")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRD")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
hierarchy
df <-  (t(hierarchy))[c(11:20),1:2]
df <-  (t(hierarchy))[c(11:21),1:2]
length(hierarchy)/2
chordDiagram(df)
df <-  (t(hierarchy))[c(11:22),1:2]
length(hierarchy)/2
chordDiagram(df)
df <-  (t(hierarchy))[c(11:23),1:2]
df <-  (t(hierarchy))[c(11:22),1:2]
df
df <-  (t(hierarchy))[c(11:29),1:2]
df <-  (t(hierarchy))
df
length(hierarchy)/2
chordDiagram(df)
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRJ","TRD")]
hierarchy <- hierarchy %>%
select("TRV", everything())
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRJ","TRD")]
hierarchy <- hierarchy %>%
select("TRJ", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
hierarchy
df <-  (t(hierarchy))
df
length(hierarchy)/2
chordDiagram(df)
par(mar = rep(0, 4), cex=1, family = "serif")
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(t(hierarchy), annotationTrack = "grid",
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRJ","TRV")]
hierarchy <- hierarchy %>%
select("TRJ", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
hierarchy
df <-  (t(hierarchy))
df
length(hierarchy)/2
chordDiagram(df)
par(mar = rep(0, 4), cex=1, family = "serif")
circos.clear()
#par(new = TRUE) # <- magic
circos.par("canvas.xlim" = c(-1, 1), "canvas.ylim" = c(-1, 1))
chordDiagram(t(hierarchy), annotationTrack = "grid",
# order = df.col.2$V1,
transparency = 0.5,
# transparency = 0.5,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(hierarchy))))))
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.par(track.margin=c(0,0))
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRJ","TRV")]
hierarchy <- hierarchy %>%
select("TRJ", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRJ")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
as.matrix(hierarchy)
colnames(hierarchy)
hierarchy
chordDiagram((hierarchy))
chain1
chain2
hierarchy
hierarchy$BJ03 <- c(1:10)
hierarchy$BJ03 <- c(1:29)
chordDiagram((hierarchy))
hierarchy
hierarchy[3] <- c(1:29)
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
dat <- read.csv("~/Downloads/TCR_Explore.analysis.file-2023.06.23 (4).csv")
dat <- as.data.frame(dat)
# length(unique(dat$group))==1
# dat <- subset(dat, dat$group==)
hierarchy <- dat[names(dat) %in% c("TRV","TRJ")]
hierarchy <- hierarchy %>%
select("TRV", everything())
head(hierarchy, n=5)
df.col1 <- as.data.frame(unique(hierarchy[,1]))
names(df.col1) <- "V1"
df.col.j <- as.data.frame(unique(hierarchy[,2]))
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
df.col.2$colour <- palette_rainbow
head(df.col.2)
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain1
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
chain2
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
df.col.2
grid.col1 <- as.data.frame(grid.col)
grid.col2 <- grid.col1[,names(grid.col1) %in% df.col.2$V1]
grid.col2 <-grid.col2[,order(names(grid.col2))]
grid.col3 <- as.matrix(grid.col2)
names(grid.col3) <- names(grid.col2)
grid.col3
# hierarchy <- dat[names(dat) %in% c(input$chain1,input$chain2)]
# hierarchy <- hierarchy[,c(input$chain1,input$chain2)]
hierarchy2 <- as.matrix(table(hierarchy[,1], hierarchy[,2]))
hierarchy[3] <- c(1:29)
hierarchy[3]
hierarchy2[3]
hierarchy2[,3]
hierarchy2[,3] <- c(1:29)
grid.col3
chain2
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(TCR.Explore)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
