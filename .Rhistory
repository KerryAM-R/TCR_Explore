adjustcolor(palette_rainbow[i], alpha.f =0.1))
}
show_col(my_col_alpha_all)
df.col.2
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
dat <- as.data.frame(dat)
# dat <- subset(dat, dat$group=="CD8")
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- hierarchy[,c("AV","AJ")]
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
dim(df.col.2)
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
my_col_alpha_all <- palette_rainbow
for(i in 1:length(palette_rainbow)) {
my_col_alpha_all[i] <- ifelse(df.col.2[i,1] %in% c("AV30"),
adjustcolor(palette_rainbow[i], alpha.f =0.9),
adjustcolor(palette_rainbow[i], alpha.f =0.1))
}
show_col(my_col_alpha_all)
df.col.2
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dat <- as.data.frame(dat)
dat <- subset(dat, dat$group=="CD8")
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- hierarchy[,c("AV","AJ")]
hierarchy$cloneCount <- 1
grid.col
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
dat <- as.data.frame(dat)
dat <- subset(dat, dat$group=="CD8")
hierarchy <- dat[names(dat) %in% c("AV","AJ")]
hierarchy <- hierarchy[,c("AV","AJ")]
hierarchy$cloneCount <- 1
chain1 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(2,3)],numcolwise(sum)))
chain1 <- chain1[order(chain1$cloneCount, decreasing = T),]
chain2 <- as.data.frame(ddply(hierarchy,names(hierarchy)[-c(1,3)],numcolwise(sum)))
chain2 <- chain2[order(chain2$cloneCount, decreasing = T),]
df.col1 <- as.data.frame(chain1[,1])
names(df.col1) <- "V1"
df.col.j <- as.data.frame(chain2[,1])
names(df.col.j) <- "V1"
df.col.2 <- rbind(df.col1,df.col.j)
dim(df.col.2)
palette_rainbow <- rev(rainbow(length(t(df.col.2))))
my_col_alpha_all <- palette_rainbow
for(i in 1:length(palette_rainbow)) {
my_col_alpha_all[i] <- ifelse(df.col.2[i,1] %in% c("AV30"),
adjustcolor(palette_rainbow[i], alpha.f =0.9),
adjustcolor(palette_rainbow[i], alpha.f =0.1))
}
show_col(my_col_alpha_all)
df.col.2
df.col.2$colour <- my_col_alpha_all
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
grid.col <- as.data.frame(as.matrix(t(as.data.frame(df.col.2$colour))))
grid.col
names(grid.col) <- df.col.2$V1
grid.col <- as.data.frame(grid.col)
grid.col
runApp('TCR_Explore_v1.0.R')
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
head(test)
head(test)
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
head(test)
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
head(test)
test <- gsub(";",",",test)
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
test$v   <- gsub(";",",",test)
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
test$v_gene   <- gsub(";",",",test$v_gene)
gead(test)
head(test)
dim(test)[1]
dim(test)[1]
dim(test)[2]
test <- read.csv("~/Downloads/PE OVA Clonotypes for TCREx.csv")
dim(test)[2]
for (i in 1:dim(test)[2]) {
test[,i]   <- gsub(";",",",test[,i])
}
head(test)
library(shiny); runApp('TCR_Explore_v1.0.R')
a <-38
b <- 70
d <- 53
e <- 139
fisher.test((matrix(data = c(a,b,
d,e), nrow=2)))
chisq.test((matrix(data = c(a,b,
d,e), nrow=2)))
fisher.test((matrix(data = c(a,d,
b,e), nrow=2)))
chisq.test((matrix(data = c(a,d,
b,e), nrow=2)))
fisher.test((matrix(data = c(a,b,
d,e), nrow=2)))
chisq.test((matrix(data = c(a,b,
d,e), nrow=2)))
fisher.test((matrix(data = c(2,1,
45,112,
44,95,
0,1), nrow=4)))
chisq.test((matrix(data = c(2,1,
45,112,
44,95,
0,1), nrow=4)))
matrix(data = c(2,1,
45,112,
44,95,
0,1), nrow=4)
matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4)
t(matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4))
chisq.test(x)
x <- t(matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4))
chisq.test(x)
x <- matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4)
chisq.test(x)
x <- matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4)
x
chisq.test(x)
x <- matrix(data = c(68,37,
0,156,
15,2,
8,14), ncol=4)
x
x <- t(matrix(data = c(2,1,
45,112,
44,95,
0,1), ncol=4))
x <- t(matrix(data = c(68,37,
0,156,
15,2,
8,14), ncol=4))
x
chisq.test(x)
install.packages("sbm")
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
?pamk
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df2 <- av.raw.df2[names (av.raw.df2) %in% c("dump.fitc","CD8.pb","LD.aqua","CD4.buv395","tcr.beta.APC.Cy7",	"tetramer.1.APC","tetramer.2.PE","CD62L.bv605")]
av.raw.df2 <- as.data.frame(read.csv("test-data/Index/colouring column2021.11.19.csv"))
names(av.raw.df2)
df2 <- av.raw.df2[names (av.raw.df2) %in% c("dump.fitc","CD8.pb","LD.aqua","CD4.buv395","tcr.beta.APC.Cy7",	"tetramer.1.APC","tetramer.2.PE","CD62L.bv605")]
head(df2)
mydata <- na.omit(df2) # listwise deletion of missing
mydata <- log10(mydata) # standardize variables
umap.data <- umap(mydata)
head(umap.data$layout)
?pamk
fit <- pamk(mydata)
# append cluster assignment
mydata <- data.frame(mydata, fit$pamobject$clustering,umap.data$layout)
aggregate(df2,by=list(fit$pamobject$clustering),FUN=mean)
y = dim(mydata)[2]
x = y-2
names(mydata)[x:y] <- c("cluster","umap.1","umap.2")
names(mydata)
ggplot(mydata,aes(x=umap.1,y=umap.2,colour = as.character(cluster)))+
geom_point() +
geom_mark_ellipse(aes(color = as.character(cluster)), lty=1 , show.legend = F)
ggplot(mydata,aes(x=tetramer.2.PE,y=tetramer.1.APC,colour = as.character(cluster)))+
geom_point()+
stat_ellipse(aes(x = tetramer.2.PE,y=tetramer.1.APC,fill=as.character(cluster)),
geom="polygon",level=0.8,alpha=0.2)
runApp('TCR_Explore_v1.0.R')
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFFN <- file.path(inputFilesPath,
"Allolobophora_chlorotica",
"ACHLO",
"Achl_ACHLO006-09_1_F.ab1")
sangerReadF <- new("SangerRead",
sangerReadF <- new("SangerRead",
readFeature
= "ABIF",
= "Forward Read",
geneticCode
TrimmingMethod
M1TrimmingCutoff
sangerReadF <- new("SangerRead",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFFN <- file.path(inputFilesPath,
"Allolobophora_chlorotica",
"ACHLO",
"Achl_ACHLO006-09_1_F.ab1")
sangerReadF <- new("SangerRead",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
?new
sangerReadF <- new(
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
sangerReadF <- new("Sanger",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
"@"(A_chloroticaFFN, QualityReport)
?new
qualityBasePlot(A_chloroticaFFN)
require(sangerseqR)
sangerReadF <- new("Sanger",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
sangerReadF <- new("SangerRead",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
qualityBasePlot(object)
?sangerseqR
require(sangeranalyseR)
install.packages("BiocManager")
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("sangeranalyseR")
inputFilesPath <- system.file("extdata/", package = "sangeranalyseR")
A_chloroticaFFN <- file.path(inputFilesPath,
"Allolobophora_chlorotica",
"ACHLO",
"Achl_ACHLO006-09_1_F.ab1")
sangerReadF <- new("SangerRead",
inputSource= "ABIF",
readFeature = "Forward Read",
readFileName = A_chloroticaFFN,
geneticCode = GENETIC_CODE,
TrimmingMethod = "M1",
M1TrimmingCutoff = 0.0001,
M2CutoffQualityScore = NULL,
M2SlidingWindowSize  = NULL,
baseNumPerRow= 100,
heightPerRow= 200,
signalRatioCutoff= 0.33,
showTrimmed= TRUE)
qualityBasePlot(object)
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "",
REGEX_SuffixForward = "_[0-9]*_F.ab1$",
REGEX_SuffixReverse = "_[0-9]*_R.ab1$")
require(sangeranalyseR)
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "",
REGEX_SuffixForward = "_[0-9]*_F.ab1$",
REGEX_SuffixReverse = "_[0-9]*_R.ab1$")
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = ".",
REGEX_SuffixForward = "_[0-9]*_F.ab1$",
REGEX_SuffixReverse = "_[0-9]*_R.ab1$")
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "inst/extdata/test-data/QC/SJS.TEN/T00016/Micromon/",
REGEX_SuffixForward = "_[0-9]*_F.ab1$",
REGEX_SuffixReverse = "_[0-9]*_R.ab1$")
writeFasta(my_aligned_contigs)
generateReport(my_aligned_contigs)
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "inst/extdata/test-data/QC/SJS.TEN/T00016/Micromon/",
REGEX_SuffixForward =  = "_[0-9].ab1$")
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "inst/extdata/test-data/QC/SJS.TEN/T00016/Micromon/",
REGEX_SuffixForward =  "_[0-9].ab1$")
?SangerAlignment
my_aligned_contigs <- SangerAlignment(ABIF_Directory      = "inst/extdata/test-data/QC/SJS.TEN/T00016/Micromon/")
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
print(hetcalls)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
print(writePairwiseAlignments(pa))
writePairwiseAlignments(pa)[1]
writePairwiseAlignments(pa)$score
pa
pa$score
pa[[1]]
View(pa)
pa@score
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
print(hetcalls)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score
pa@type
pa@metadata
pa@pattern
pa@subject
pa@gapOpening
pa@gapExtension
pa@elementMetadata
hetcalls
pa@score/4351
pa@score/367
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
hetcalls
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/367
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A2_A07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
hetcalls
hetcalls@traceMatrix
hetcalls@primarySeqID
hetcalls@primarySeq
hetcalls@secondarySeqID
hetcalls@secondarySeq
hetcalls@secondarySeq[1]
hetcalls@secondarySeq[[1]]
head(hetcalls@secondarySeq)
summary(hetcalls@secondarySeq)
length(hetcalls@secondarySeq)
length(hetcalls@secondarySeq)[1]
pa@score/length(hetcalls@secondarySeq)[1]
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A2_A07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
length(hetcalls@secondarySeq)[1]
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
length(hetcalls@secondarySeq)[1]
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A5_B07 low.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
length(hetcalls@secondarySeq)[1]
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B4_D07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
length(hetcalls@secondarySeq)[1]
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B7_E07.ab1")
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B7_E07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.25)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-B9_F07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.5)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-C3_H07.ab1")
hetcalls <- makeBaseCalls(hetsangerseq, ratio = 0.33)
Primaryseq <- primarySeq(hetcalls, string = TRUE)
secondary_seq <- secondarySeq(hetcalls, string = TRUE)
pa <- pairwiseAlignment(primarySeq(hetcalls), secondarySeq(hetcalls))
pa@score/length(hetcalls@secondarySeq)[1]
chromatogram(hetcalls, width = 100, height = 2, showcalls = "both", trim5 =20, trim3 = 20)
inFile.seq <- input$file1_seq.file
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
showtext_auto()
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
font_add_google("Press Start 2P", "Game")
showtext_auto()
font <- as.data.frame(font_families())
font
showtext_auto()
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df <- read.csv("~/Desktop/Allopurinol/100123 Supplementary Table 1.csv")
df <- as.data.frame(df)
names(df)
df <- as.data.frame(df)
names(df)
df <- df[names(df) %in% c("cloneCount","Drug.Group","AA.JUNCTION_B","AVJ")]
df.names <-  df[ , -which(names(df) %in% c("cloneCount"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep("AA.JUNCTION_B",names(df1))])
df1$chain <- df1[,names(df1) %in% "AVJ"]
df1 <- df1[order(df1$chain, decreasing = F),]
df1$chain <- factor(df1$chain,levels = unique(df1$chain))
df.col.2 <- as.data.frame(hist.col.table())
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
