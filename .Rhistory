legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
mat
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
ggseqlogo(mat, seq_type='aa')
require(ggseqlogo)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa')
warnings()
# motif -----
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
names(df)
df_unique <- as.data.frame(ddply(df,(c("group","JUNCTION..AA._B")),numcolwise(sum)))
df_unique$len1 <- nchar(df_unique[,names(df_unique) %in%"JUNCTION..AA._B"])
unique(df_unique$len1)
subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="CD8")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif
motif_count1_aa <- motif
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif_count2_aa <- motif
motif_count2_aa
diffLogoObj = createDiffLogoObject(pwm1 = as.data.frame(motif_count1_aa@mat),
pwm2 = as.data.frame(motif_count2_aa@mat),
alphabet = ASN
)
tail(diffLogoObj$letters$x)
diffLogo(diffLogoObj, diffLogoConfiguration = list(showSequenceLogosTop=T))
df_subset <- subset(df_unique,df_unique$len1==15)
x <- createDiffLogoObject(as.data.frame(motif_count1_aa@mat), as.data.frame(motif_count2_aa@mat),
alphabet = ASN, baseDistribution = differenceOfICs,
)
mat <- (x$pwm1 - x$pwm2)
require(ggseqlogo)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
head(df1)
head(df2)
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
head(df)
df <- merge(df1,df2,by.x="ID",by.y = "name")
View(df2)
duplicated(df2$name)
df2[duplicated(df2$name),]
dim(df2[duplicated(df2$name),])
dim(df2[unique(df2$name),])
df2 <- df2[unique(df2$name),]
names(df2)
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
names(df2)
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
duplicated(df2$name)
df2 <- df2[unique(df2$name),]
names(df2)
head(names(df2))
head(df2)
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
df2[unique(df2$name),]
df2 <- df2[!duplicated(df2$name),]
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
df2.u <- df2[!duplicated(df2$name),]
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias",all.x=T)
head(df)
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
head(df)
df4 <- df[c(5,2,3)]
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias")
df4 <- df[c(5,2,3)]
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
df4 <- df[c(5,2,3)]
head(df4)
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
write.csv(df,"converted.ID.csv")
head(df4)
names(df4)[1] <- "ID"
head(df4)
write.csv(df4,"~/Desktop/Converted.to.gene.names.csv")
write.csv(df,"~/Desktop/converted.ID.csv")
## packages required ----
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
library("shinyFiles")
library('shinyDirectoryInput')
install.packages("shinyDirectoryInput")
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
font_add_google("Press Start 2P", "Game")
install.packages("shinyDirectoryInput")
runApp('TCR_Explore_v1.0.R')
?radioButtons
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df <- read.csv("test-data/Group/paired_TCR_file2022.05.24.csv",header=T)
df <- as.data.frame(df)
head(df)
df[grep("Sequence",names(df))]
df[!grep("Sequence",names(df))]
df[!grep("Sequence",names(df)),]
df[,!grep("Sequence",names(df))]
df[names(df) %in% grep("Sequence",names(df))]
names(df) %in% grep("Sequence",names(df))
names(df) %in% grep("Sequence",names(df))
df[names(df) %in% grep("Sequence*",names(df))]
names(df) %in% grep("Sequence*",names(df))
names(df) %in% grep("Sequence...",names(df))
grep("Sequence...",names(df)
names(df) %in% grep("Sequence...",names(df))
df[names(df) %in% grep("Sequence*",names(df))]
df <- ddply(df,names(df[-c(1,5)]),numcolwise(sum))
df2 <- df[,c(grep("JUNCTION",names(df)))]
df3 <- df2
for (i in 1:dim(df3)[1]) {
df3[i,] <- nchar(df3[i,])
df3
}
names(df3) <- paste(names(df3),"length", sep="_")
df4 <- cbind(df,df3)
df4
}
grep("Sequence...",names(df))
grep("Sequence",names(df))
grep("Sequence",df)
grep("Sequence",names(df))
names(df) %in% grep("Sequence...",names(df))
names(df) %in% grep("Sequence",names(df))
names(df) %in% grep("Sequence_A",names(df))
names(df) %in% grep("Sequence_B",names(df))
df[!grep("Sequence*",names(df))]
df[!grep("Sequence*",names(df)),]
df[,!grep("Sequence*",names(df))]
df[,grep("Sequence*",names(df))]
df[,-grep("Sequence*",names(df))]
df <- df[,-grep("Sequence*",names(df))]
df <- df[,-grep("allele*",names(df))]
df <- ddply(df,names(df[-c(1)]),numcolwise(sum))
df2 <- df[,c(grep("JUNCTION",names(df)))]
df3 <- df2
for (i in 1:dim(df3)[1]) {
df3[i,] <- nchar(df3[i,])
df3
}
names(df3) <- paste(names(df3),"length", sep="_")
df4 <- cbind(df,df3)
df4
View(df4)
df <- read.csv("test-data/Group/paired_TCR_file2022.05.24.csv",header=T)
df <- as.data.frame(df)
df <- df[,-grep("Sequence*",names(df))]
df <- df[,-grep("allele*",names(df))]
names(df)
df2 <- ddply(df,names(df[-c(1)]),numcolwise(sum))
df2
df2 <- ddply(df,names(df[-c(1)]),numcolwise(sum))
names(df)
df <- read.csv("test-data/Group/paired_TCR_file2022.05.24.csv",header=T)
df <- as.data.frame(df)
df <- df[,-grep("Sequence*",names(df))]
df <- df[,-grep("allele*",names(df))]
names(df)
df2 <- ddply(df,names(df[-c(1)]),numcolwise(sum))
df2
View(df2)
df <- df[,-grep("well",names(df))]
names(df)
df2 <- ddply(df,names(df[-c(1)]),numcolwise(sum))
df2
runApp('TCR_Explore_v1.0.R')
df3 <- df2
for (i in 1:dim(df3)[1]) {
df3[i,] <- nchar(df3[i,])
df3
}
df3
df <- read.csv("test-data/Group/paired_TCR_file2022.05.24.csv",header=T)
df <- as.data.frame(df)
df <- df[,-grep("Sequence*",names(df))]
df <- df[,-grep("allele*",names(df))]
df <- df[,-grep("well",names(df))]
df2 <- ddply(df,names(df[-c(1)]),numcolwise(sum))
df3 <- df2[,c(grep("JUNCTION",names(df2)))]
for (i in 1:dim(df3)[1]) {
df3[i,] <- nchar(df3[i,])
df3
}
names(df3) <- paste(names(df3),"length", sep="_")
df4 <- cbind(df2,df3)
df4
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("tripr")
## Check that you have a valid Bioconductor installation
BiocManager::valid()
BiocManager::install("tripr")
BiocManager::install("tripr")
## volcano plots
library("rmarkdown")
## volcano plots
library("rmarkdown")
require("tidyverse")
require("ggplot2") #Best plots
require("ggrepel") #Avoid overlapping labels
require("shiny")
require("shinyBS")
require("gridExtra")
require("DT")
require("plyr")
require("dplyr")
require("reshape2")
require("treemapify") # tremap plot
require("circlize")
require("motifStack")
install.packages("motifStack")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("flowCore")
require("motifStack")
BiocManager::install("motifStack")
BiocManager::install("flowCore")
BiocManager::install("muscle")
library("devtools")
install_github("jokergoo/ComplexHeatmap")
install_github("mgledi/DiffLogo")
require("motifStack")
require("scales") # to access break formatting functions
require("flowCore")
require("readxl")
require("RColorBrewer")
require("randomcoloR")
require("colourpicker") # selectively colour
require("ComplexHeatmap")
require("muscle") # aligning sequences
require("DiffLogo") # comparing motif plots
require("vegan") # diversity statistic
require("VLF") ## aa.count.function
library("shinyWidgets")
library("showtext")
library("ggseqlogo")
font_add_google("Gochi Hand", "gochi")
font_add_google("Schoolbell", "bell")
font_add_google("Press Start 2P", "Game")
showtext_auto()
font <- as.data.frame(font_families())
library(shiny); runApp('TCR_Explore_v1.0.R')
install.packages("markdown")
## volcano plots
require("markdown")
runApp('TCR_Explore_v1.0.R')
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("tripr")
library(tripr)
tripr::run_app()
install.packages("remotes")
remotes::install_github("debdagybra/IMIabgd")
install.packages("remotes")
remotes::install_github("debdagybra/IMIabgd")
require("remotes")
remotes::install_github("debdagybra/IMIabgd")
install.packages("rJava")
remotes::install_github("debdagybra/IMIabgd")
require("rJava")
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)))]
dataframe <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
head(dataframe)
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)))]
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe))))]
names(df.names)
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("allele",names(dataframe))  ))]
names(df.names)
dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("allele",names(dataframe))  ))]
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("allele",names(dataframe))  ))]()
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("allele",names(dataframe))  ))])
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("allele",names(dataframe))  ))])
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("*allele*",names(dataframe))  ))])
grep("*allele*",names(dataframe))
c("cloneCount","clone",grep("Sequence",names(dataframe)),grep("*allele*",names(dataframe))  )
dataframe[grep("*allele*",names(dataframe))]
names(dataframe)[grep("*allele*",names(dataframe))]
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("*allele*",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))]  ))])
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))]  ))])
dataframe <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
head(dataframe)
names(head(dataframe))
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))]  ))])
names(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))],names(dataframe)[grep("JUNCTION_",names(dataframe))]  ))])
head(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))],names(dataframe)[grep("JUNCTION_",names(dataframe))]  ))])
head(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))],names(dataframe)[grep("JUNCTION_",names(dataframe))],names(dataframe)[grep("IMGT",names(dataframe))]  ))])
head(dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone",names(dataframe)[grep("Sequence",names(dataframe))],names(dataframe)[grep("*allele*",names(dataframe))],names(dataframe)[grep("JUNCTION_",names(dataframe))],names(dataframe)[grep("IMGT",names(dataframe))] ,names(dataframe)[grep("GENE",names(dataframe))] ))])
runApp('TCR_Explore_v1.0.R')
10^5
10000
for (j in 0.001:1) {
-10^(i-0.1) <- j+ 0.0001
}
M4<-matrix(rpois(-10000,0),nrow=6)
M4<-matrix(rpois(-10000,-10),nrow=6)
matrix(rpois(-10000,-10),nrow=6)
matrix(rpois(1000,10),nrow=6)
?rpois
c(runif(55,min=-1,max=0),runif(14*14-55,min=0,max=+1))
matrix(rpois(1,10),nrow=6)
matrix(rpois(100,10),nrow=10)
matrix(rpois(100,100),nrow=10)
matrix(rpois(100,1000),nrow=10)
matrix(rpois(1,1000),nrow=10) +
M4<-matrix(rpois(-10000,-10),nrow=6)
matrix(rpois(1,1000),nrow=10)
matrix(rpois(10,1:1000),nrow=10)
matrix(rpois(10,1000),nrow=10)
matrix(rpois(10,1000),nrow=10)
matrix(rpois(100,10),nrow=10)
matrix(rpois(1000,10),nrow=10)
matrix(rpois(100,100),nrow=10)
matrix(rpois(100,1000),nrow=10)
a <- matrix(rpois(100,100),nrow=10)
b <- matrix(rpois(100,1000),nrow=10)
rbind(a,b)
a2 <- rbind(a,b)
for (i in 5:1) {
for (j in 0.001:1) {
a2[a2 < -10^(i-0.1)] <- j+ 0.0001
}
}
a2
a2 <- rbind(a,b)*-1
for (i in 5:1) {
for (j in 0.001:1) {
a2[a2 < -10^(i-0.1)] <- j+ 0.0001
}
}
a2
for (j in 0.0001:1) {
a2[a2 < -10^(i-0.1)] <- j+ 0.0001
}
for (i in 5:1) {
for (j in 0.0001:1) {
a2[a2 < -10^(i-0.1)] <- j+ 0.0001
}
}
a2
a <- matrix(rpois(100,100),nrow=10)
b <- matrix(rpois(100,1000),nrow=10)
a2 <- rbind(a,b)*-1
a3 <- a2
a3[a3 < -10^(i-0.1)] <- j+ 0.0001
for (i in 5:1) {
for (j in 0.0001:1) {
a3[a3 < -10^(i-0.1)] <- j+ 0.0001
}
}
a2
a3
df <- as.data.frame(
replicate(10, sample(1:100,100))
)
df2 <- df
for(i in seq_len(nrow(df))){
df2[i,] <- cutoff(df[i,])
}
df2
cutoff <- function(x){
x[x < 0.8* max(x)] <- 0
return(x)
}
df <- as.data.frame(
replicate(10, sample(1:100,100))
)
df2 <- df
for(i in seq_len(nrow(df))){
df2[i,] <- cutoff(df[i,])
}
df2
a2
1/a2
log(1/a2*-1,10)
a <- matrix(rpois(100,100),nrow=10)
b <- matrix(rpois(100,10000),nrow=10)
a2 <- rbind(a,b)*-1
a3 <- a2
log(1/a2*-1,10)
a <- matrix(rpois(100,100),nrow=10)
b <- matrix(rpois(100,10000),nrow=10) *-1
a2 <- rbind(a,b)
a3 <- a2
log(1/a2*-1,10)
ifelse(a2 < 0, log(1/a2*-1,10), a2)
ifelse(a2 < 0, 1/a2*-1, a2)
runApp('TCR_Explore_v1.0.R')
a2 <- as.data.frame(a2)
ifelse(a2 < 0, 1/a2*-1, a2)
a2 <- as.matrix(a2)
ifelse(a2 < 0, 1/a2*-1, a2)
as.data.frame(ifelse(a2 < 0, 1/a2*-1, a2))
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df <- read.csv("test-data/Index/TCR_Explore_index.clonal.2021.11.19.csv",header = T, fileEncoding = "UTF-8")
df <- as.data.frame(df)
head(df)
df2 <- df[,c("cloneCount",input$string.data)]
df2 <- df[,c("cloneCount",c("Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ"))]
df2
df[,-c("cloneCount",c("Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ"))]
df[!,c("cloneCount",c("Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ"))]
df[, -which(c("cloneCount",c("Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ"))]
df[ , -which(names(df) %in% c("cloneCount","Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ"))]
df[ , -which(names(df) %in% c("cloneCount","Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ","well",    "Vb",  "Jb","TRBD",  "Va","Ja"))]
df.mat <- df[ , -which(names(df) %in% c("cloneCount","Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ","well",    "Vb",  "Jb","TRBD",  "Va","Ja"))]
df.mat1 <- df[ , which(names(df) %in% c("cloneCount","Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ","well",    "Vb",  "Jb","TRBD",  "Va","Ja"))]
df.mat1
df.mat <- df[ , -which(names(df) %in% c("cloneCount","Indiv","group","TRBV","CDR3b.Sequence","TRBJ","TRAV","CDR3a.Sequence", "TRAJ","AJ", "BJ","AJBJ","well",    "Vb",  "Jb","TRBD",  "Va","Ja"))]
a2 <- as.matrix(df.mat)
as.data.frame(ifelse(a2 < 0, 1/a2*-1, a2))
a2 <- as.data.frame(ifelse(a2 < 0, 1/a2*-1, a2))
df.mat <- as.matrix(df.mat)
df.mat <- as.data.frame(ifelse(df.mat < 0, 1/df.mat*-1, df.mat))
rbind(df.mat1)
rbind(df.mat1,df.mat)
cbind(df.mat1,df.mat)
a2
df <- read.csv("test-data/Index/TCR_Explore_index.clonal.2021.11.19.csv",header = T, fileEncoding = "UTF-8")
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
