updateSelectInput(
session,
"upset.select",
choices=names(input.data2()),
selected = "AVJ_aCDR3_BVJ_bCDR3")
})
observe({
updateSelectInput(
session,
"upset.group.select",
choices=names(select_group()),
selected = "group")
})
observe({
updateSelectInput(
session,
"order.of.group",
choices=select_group(),
selected = c("CD8","IFN"))
})
upset.parameters <- function () {
df <- input.data2();
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
head(df)
unique.df <- unique(df[c(input$upset.select,input$upset.group.select)])
names(unique.df) <- c("chain","group")
unique.df$cloneCount <- 1
mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
# a <- as.data.frame(unique(names(mat)))
#   a$V1 <- distinctColorPalette(dim(a)[1])
df.x <- make_comb_mat(mat)
if (input$upset_anno == "Colour by degree") {
your_list <- c(input$upset_colours_list1)
your_list_df <- as.data.frame((unlist(strsplit(your_list, ','))))
names(your_list_df) <- "ID"
ht = draw(UpSet(df.x,
pt_size = unit(input$upset.point.size, "mm"),
lwd = input$upset.lwd,
row_names_gp =  gpar(fontfamily = input$font_type,fontsize = input$upset.text.size),#changes font size of "set size" labels
column_names_gp = gpar(fontfamily = input$font_type),
comb_col = c(your_list_df$ID)[comb_degree(df.x)],
top_annotation = upset_top_annotation(df.x,
numbers_gp = gpar(fontfamily = input$font_type,fontsize = input$font.size.anno.upset),
annotation_name_gp = gpar(fontfamily = input$font_type,fontsize=input$font.size.anno.upset),
gp = gpar(fill = input$top_annotation_colour),
),
right_annotation = upset_right_annotation(df.x,
add_numbers = T,
numbers_gp = gpar(fontfamily = input$font_type,fontsize = input$font.size.anno.upset),
annotation_name_gp = gpar(fontfamily = input$font_type,fontsize=input$font.size.anno.upset),
gp = gpar(fill = input$right_annotation_colour),
),
set_order  = c(input$order.of.group)
), padding = unit(c(20, 20, 20, 20), "mm"))
}
else {
ht = draw(UpSet(df.x,
pt_size = unit(input$upset.point.size, "mm"),
lwd = input$upset.lwd,
row_names_gp =  gpar(fontfamily = input$font_type, fontsize = input$upset.text.size),
column_names_gp = gpar(fontfamily = input$font_type),
top_annotation = upset_top_annotation(df.x,
annotation_name_gp = gpar(fontfamily = input$font_type),
gp = gpar(fill = input$top_annotation_colour),
),
right_annotation = upset_right_annotation(df.x,
add_numbers = T,
numbers_gp = gpar(fontfamily = input$font_type,fontsize = input$font.size.anno.upset),
annotation_name_gp = gpar(fontfamily = input$font_type,fontsize=input$font.size.anno.upset),
gp = gpar(fill = input$right_annotation_colour),
),
set_order  = c(input$order.of.group)
), padding = unit(c(20, 20, 20, 20), "mm"))
}
od = column_order(ht)
cs = comb_size(df.x)
decorate_annotation("intersection_size", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = input$upset.font.size, fontfamily = input$font_type)
) })
}
output$UpSet.plot <- renderPlot({
withProgress(message = 'Figure is being generated...',
detail = '', value = 0, {
test_fun()
})
upset.parameters()
})
upset.datatable1 <- reactive({
df <- input.data2();
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
head(df)
unique.df <- unique(df[c(input$upset.select,input$upset.group.select)])
names(unique.df) <- c("chain","group")
unique.df$cloneCount <- 1
mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
mat
})
output$upset.datatable <- DT::renderDataTable( {
datatable(upset.datatable1(), extensions = "Buttons", options = list(searching = TRUE,
ordering = TRUE,
buttons = c('copy','csv', 'excel'),
dom = 'Bfrtip',
pageLength=2,
lengthMenu=c(2,5,10,20,50,100),
scrollX = TRUE
))
}, server = FALSE)
output$downloadPlot_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_",gsub("/", "-", x), ".pdf", sep = "")
}, content = function(file) {
pdf(file, width=input$width_upset,height=input$height_upset, onefile = FALSE) # open the pdf device
print(upset.parameters())
dev.off()}, contentType = "application/pdf" )
output$downloadPlotPNG_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_", gsub("/", "-", x), ".png", sep = "")
},
content = function(file) {
png(file, width = input$width_png_upset, height = input$height_png_upset, res = input$resolution_PNG_upset)
print(upset.parameters())
dev.off()}, contentType = "application/png" # MIME type of the image
)
}
shinyApp(ui, server)
}
runApp_TCR_EXPLORE_V1()
devtools::document()
runApp('R')
devtools::document()
devtools::check()
require('usethis')
use_cc0_license()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
TCR.Explore::runApp_TCR_EXPLORE_V1()
# hetsangerseq <- readsangerseq("test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1")
hetsangerseq <- readsangerseq(system.file("extdata","test-data/QC/SJS.TEN/E10630/Micromon/IFNg/IFNA-A10_C07.ab1",package ="TCR.Explore"))
dataframe = read_xls(system.file("extdata","test-data/QC/Vquest_data/CD8_E10630_A.xls",package ="TCR.Explore"), sheet = 2)
dataframe = read_xls(system.file("extdata","test-data/QC/Vquest_data/CD8_E10630_A.xls",package ="TCR.Explore"), sheet = 1)
dataframe = read.csv(system.file("extdata","test-data/QC/QC.ab1_files/E0630.ab1_QC_2022-12-30.csv",package ="TCR.Explore"), header = T)
View(dataframe)
dataframe = read.csv(system.file("extdata","test-data/QC/QC.csv_files/SJS.TEN.three.samps.csv",package ="TCR.Explore"), header = T)
dataframe = read.table(system.file("extdata","test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",package ="TCR.Explore"),header=T)
system.file("extdata","test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",package ="TCR.Explore")
read.table(system.file("extdata","test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",package ="TCR.Explore"))
read.table(system.file("extdata","test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",package ="TCR.Explore"),sep="\t")
dataframe = read.table(system.file("extdata","test-data/QC/ImmunoSEQ/ES8_TSNLQEQIGW_3.tsv",package ="TCR.Explore"),sep="\t",header=T)
# dataframe = read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
dataframe = read.csv(system.file("extdata","test-data/Group/paired_TCR_file2022.05.24.csv",package ="TCR.Explore"))
# dataframe = read.csv("test-data/Group/paired_unsummarised2021.09.22.csv",header=T)
dataframe = read.csv(system.file("extdata","test-data/Group/ImmunoSEQ.test.csv",package ="TCR.Explore"),header= T)
dataframe = read.FCS(system.file("extdata","test-data/Index/Murine Lymph Node_INX_780 Fib index 2_001_018.fcs",package ="TCR.Explore"))
dataframe = read.csv(system.file("extdata","test-data/Index/DR4-780 TCR sequence data.csv",package ="TCR.Explore"),header = T)
dataframe = read.csv(system.file("extdata","test-data/Index/TCR_Explore_index.clonal.2021.11.19.csv",package ="TCR.Explore"),header = T)
devtools::document()
devtools::build()
TCR.Explore::runApp_TCR_EXPLORE_V1()
TCR.Explore::runApp_TCR_EXPLORE_V1()
devtools::build()
remove.packages("TCR.Explore")
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_roxygen_md()
usethis::use_roxygen_md()
devtools::document()
rlang::last_trace()
usethis::create_package("../TCR_Explore/")
usethis::create_package("../TCR.Explore/")
usethis::create_package("../TCR.Explore")
usethis::create_package("../../TCR.Explore")
# usethis::create_package("../TCR.Explore")
devtools::document()
# usethis::create_package("../TCR.Explore")
devtools::document()
# usethis::create_package("../TCR.Explore")
devtools::document()
# usethis::create_package("../TCR.Explore")
devtools::document()
pkgload::dev_help('runApp_TCR_EXPLORE_V1')
remotes::install_github("KerryAM-R/TCR_Explore")
TCR.Explore::runApp_TCR_EXPLORE_V1()
devtools::install_github("KerryAM-R/TCR_Explore")
devtools::install_github("KerryAM-R/TCR_Explore",force = T)
runApp('TCR_Explore_v1.0.R')
TCR.Explore::runApp_TCR_EXPLORE_V1()
STEGO.R::Load_required_packages()
source(system.file("Global","required_functions.R",package = "STEGO.R"))
suppressWarnings(source(system.file("scGATE","custom_df_scGATE.R",package = "STEGO.R")))
barcode <- read.table("~/Documents/Post-doc/PostDoc_Antwerp/R_files/1_Files_scTCRseq/Lit/Annotation_Lit/Memory/NCOMMS-19-7936188_scRNAseq_barcodes.tsv")
features <- read.table("~/Documents/Post-doc/PostDoc_Antwerp/R_files/1_Files_scTCRseq/Lit/Annotation_Lit/Memory/NCOMMS-19-7936188_scRNAseq_genes.tsv")
mmMat <- Matrix::readMM("~/Documents/Post-doc/PostDoc_Antwerp/R_files/1_Files_scTCRseq/Lit/Annotation_Lit/Memory/NCOMMS-19-7936188_scRNAseq_raw_UMIs.mtx")
mmMat[1:6,1:6]
head(features)
rownames(mmMat) <- make.unique(features$V1) # select which feature to label genes...
mmMat <- as.data.frame(as.matrix(mmMat))
names(mmMat) <- barcode$V1
mmMat[1:6,1:6]
sc <- CreateSeuratObject(counts = df.test2, project = "memory")
sc <- CreateSeuratObject(counts = mmMat, project = "memory")
names(mmMat)
rownames(mmMat)
sc[["percent.mt"]] <- PercentageFeatureSet(sc, pattern = "^MT-")
sc[["percent.rb"]] <- PercentageFeatureSet(sc, pattern = "^RP[SL]")
VlnPlot(sc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.rb"), ncol = 2)
after_violin_plot <- subset(sc, subset = nFeature_RNA >= 200 & nFeature_RNA <= 6000 & percent.mt <= 10 & percent.rb >= 10)
VlnPlot(after_violin_plot, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.rb"), ncol = 2)
sc <- NormalizeData(after_violin_plot)
sc <- FindVariableFeatures(sc, selection.method = "vst", nfeatures = 2000)
sc <- FindVariableFeatures(sc, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(sc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sc)
sc <- FindVariableFeatures(sc, nfeatures = 2000)
?FindVariableFeatures
sc <- FindVariableFeatures(sc, selection.method = "disp", nfeatures = 2000)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(sc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
all.genes <- rownames(sc)
sc <- ScaleData(sc, features = all.genes)
sc <- RunPCA(sc, features = VariableFeatures(object = sc))
plot2
ElbowPlot(sc)
sc<- FindNeighbors(sc, dims = 1:30)
sc <- FindClusters(sc, resolution = 1)
sc <- RunUMAP(sc, dims = 1:30)
DimPlot(sc, reduction = "umap")
# FeaturePlot()
FeaturePlot(sc,features = "CCL4")
# FeaturePlot()
FeaturePlot(sc,features = "CCL5")
sc1 <- sc
metadata <- read.table("~/Documents/Post-doc/PostDoc_Antwerp/R_files/1_Files_scTCRseq/Lit/Annotation_Lit/Memory/NCOMMS-19-7936188_metadata.txt",sep = "\t")
metadata$barcode <- rownames(metadata)
sc1@meta.data$barcode <- rownames(sc1@meta.data)
currentmeta <- sc1@meta.data
updatedmeta <- merge(currentmeta,metadata,by = "barcode",sort = F)
head(updatedmeta)
rownames(updatedmeta) <- updatedmeta$barcode
sc1@meta.data <- updatedmeta
names(sc1@meta.data)
DimPlot(sc1, reduction = "umap", group.by = "cytokine.condition")
FeaturePlot(sc1,features = "CCL5")
DimPlot(sc1, reduction = "umap", group.by = "cytokine.condition")
Idents(sc1) <- sc1@meta.data$cluster.id
uni_ID <- unique(Idents(sc1))
min.pct.expression = 0.25 #standard setting: 0.25
min.logfc = 0.25 #0.25 is standard
p.val.cutoff <- (1/10^3) #(1/10^3) is standard, use (1/10^0) to ignore
cluster.names <- unique(Idents(sc1))[order(unique(Idents(sc1)))]
cluster.names
cluster.names[2:5]
name.clone <- cluster.names[7]
name.clone2 <- cluster.names[20]
print(paste0("calculating markers for cluster ",name.clone,". Total: ",length(cluster.names)," clusters"))
markers.fm.list <- FindMarkers(sc1, ident.1 = name.clone, indent.2 = name.clone2, min.pct = min.pct.expression,  logfc.threshold = min.logfc, only.pos = T) #
markers.fm.list <- markers.fm.list[which(markers.fm.list$p_val_adj < (p.val.cutoff) ),] #select genes with p_val_adj > p.val.cutoff setting
list_marker <- rownames(markers.fm.list)[1:20]
list_marker
cells <- unlist(x = CellsByIdentities(object = sc1, idents = cluster.names))
data.features <- FetchData(object = sc1, vars = list_marker,
cells = cells)
names(data.features) <- make.unique(names(data.features))
names(data.features)
data.features$id <- Idents(object = sc1)[cells, drop = TRUE]
names(data.features) <- gsub("-","_",names(data.features) ) # cannot have - before a number?
df <- as.data.frame(ddply(data.features,c("id") ,numcolwise(mean))) # average
head(df)
rownames(df) <- df$id
df <- df[,!names(df) %in% "id"]
df2 <- df[rownames(df) %in% cluster.names,]
df2
df.1 <- as.matrix(df2)
df.1.scale <- scale(df.1)
(df.1)
df.1.10 <- log10(df.1)
df.1.10 <- ifelse(df.1.10=="-Inf",0,df.1.10)
head(df.1.10)
head(df.1.10)
min.FC <- min(df.1.10)
med.FC <- max(df.1.10)/2
max.FC <- max(df.1.10)
ht <- Heatmap(as.matrix(df.1.10),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
x = 20
res <- setNames(melt(df.1[,1:x]), c('condition', 'gene', 'relative'))
res.scale <- setNames(melt(df.1.scale[,1:x]), c('condition', 'gene', 'scale'))
head(res)
head(res.scale)
res$scale <- res.scale$scale
ggplot(res, aes(x = gene, y = condition,size = relative, fill = relative)) +
geom_point(shape = 21, colour = "black")+
# scale_size_area(max_size = 10) +
scale_fill_gradient2(
low = "gold",
mid = "white",
high = "purple",
space = "Lab",
na.value = "grey90",
guide = "colourbar",
aesthetics = "fill")+
theme_bw()+
theme(
axis.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# axis.text.y = element_text(colour="black", size=input$Bar_legend_size,family=input$font_type),
axis.text.x = element_text(colour="black", angle = 90),
# legend.text = element_text(colour="black", size=input$Bar_legend_size,family=input$font_type),
legend.title = element_blank(),
axis.line.x = element_blank(),
panel.grid = element_blank(),
legend.position = "right",
)+
guides(size = "none")
ggplot(res, aes(x = gene, y = condition,size = relative, fill = scale)) +
geom_point(shape = 21, colour = "black")+
# scale_size_area(max_size = 10) +
scale_fill_gradient2(
low = "gold",
mid = "white",
high = "purple",
space = "Lab",
na.value = "grey90",
guide = "colourbar",
aesthetics = "fill")+
theme_bw()+
theme(
axis.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
# axis.text.y = element_text(colour="black", size=input$Bar_legend_size,family=input$font_type),
axis.text.x = element_text(colour="black", angle = 90),
# legend.text = element_text(colour="black", size=input$Bar_legend_size,family=input$font_type),
legend.title = element_blank(),
axis.line.x = element_blank(),
panel.grid = element_blank(),
legend.position = "right",
)+
guides(size = "none")
name.clone
name.clone2
name.clone <- cluster.names[1]
name.clone2 <- cluster.names[2]
print(paste0("calculating markers for cluster ",name.clone,". Total: ",length(cluster.names)," clusters"))
markers.fm.list <- FindMarkers(sc1, ident.1 = name.clone, indent.2 = name.clone2, min.pct = min.pct.expression,  logfc.threshold = min.logfc, only.pos = T) #
markers.fm.list <- markers.fm.list[which(markers.fm.list$p_val_adj < (p.val.cutoff) ),] #select genes with p_val_adj > p.val.cutoff setting
list_marker <- rownames(markers.fm.list)[1:20]
list_marker
cells <- unlist(x = CellsByIdentities(object = sc1, idents = cluster.names))
data.features <- FetchData(object = sc1, vars = list_marker,
cells = cells)
names(data.features) <- make.unique(names(data.features))
names(data.features)
data.features$id <- Idents(object = sc1)[cells, drop = TRUE]
names(data.features) <- gsub("-","_",names(data.features) ) # cannot have - before a number?
?numcolwise
df <- as.data.frame(ddply(data.features,c("id") ,numcolwise(mean))) # average
head(df)
rownames(df) <- df$id
df <- df[,!names(df) %in% "id"]
df2 <- df[rownames(df) %in% cluster.names,]
df2
df.1 <- as.matrix(df2)
df.1.scale <- scale(df.1)
(df.1)
df.1.10 <- log10(df.1)
df.1.10 <- ifelse(df.1.10=="-Inf",0,df.1.10)
head(df.1.10)
head(df.1.10)
min.FC <- min(df.1.10)
med.FC <- max(df.1.10)/2
max.FC <- max(df.1.10)
ht <- Heatmap(as.matrix(df.1.10),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
ht <- Heatmap(as.matrix(df.1),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
markers.fm.list <- FindMarkers(sc1, ident.1 = name.clone,
# indent.2 = name.clone2,
min.pct = min.pct.expression,  logfc.threshold = min.logfc, only.pos = T) #
markers.fm.list <- markers.fm.list[which(markers.fm.list$p_val_adj < (p.val.cutoff) ),] #select genes with p_val_adj > p.val.cutoff setting
list_marker <- rownames(markers.fm.list)[1:20]
list_marker
cells <- unlist(x = CellsByIdentities(object = sc1, idents = cluster.names))
data.features <- FetchData(object = sc1, vars = list_marker,
cells = cells)
names(data.features) <- make.unique(names(data.features))
names(data.features)
data.features$id <- Idents(object = sc1)[cells, drop = TRUE]
names(data.features) <- gsub("-","_",names(data.features) ) # cannot have - before a number?
?numcolwise
df <- as.data.frame(ddply(data.features,c("id") ,numcolwise(mean))) # average
head(df)
rownames(df) <- df$id
df <- df[,!names(df) %in% "id"]
df2 <- df[rownames(df) %in% cluster.names,]
df2
df.1 <- as.matrix(df2)
df.1.scale <- scale(df.1)
(df.1)
df.1.10 <- log10(df.1)
df.1.10 <- ifelse(df.1.10=="-Inf",0,df.1.10)
head(df.1.10)
head(df.1.10)
min.FC <- min(df.1)
med.FC <- max(df.1)/2
max.FC <- max(df.1)
ht <- Heatmap(as.matrix(df.1),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
min.FC <- min(df.1.scale)
med.FC <- max(df.1.scale)/2
max.FC <- max(df.1.scale)
ht <- Heatmap(as.matrix(df.1.scale),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
?scale
min.FC <- min(df.1)
med.FC <- max(df.1)/2
max.FC <- max(df.1)
ht <- Heatmap(as.matrix(df.1),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
min.FC <- min(df.1.10)
med.FC <- max(df.1.10)/2
max.FC <- max(df.1.10)
ht <- Heatmap(as.matrix(df.1.10),
heatmap_legend_param = list(title = "",
title_gp = gpar(fontsize = 10,
fontface = "bold",fontfamily='serif'),
labels_gp = gpar(fontsize = 10,fontfamily='serif')),
col = colorRamp2(c(min.FC,med.FC,max.FC), c("gold","white","purple")),
row_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
column_names_gp = grid::gpar(fontsize = 10,fontfamily='serif'),
)
markers.fm.list[1:10,]
draw(ht, padding = unit(c(10, 10, 10, 10), "mm"))
