updateSelectInput(
session,
"x.axis2",
choices=names(dat),
selected = "tetramer no 2 PE")
})
observe({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
updateSelectInput(
session,
"y.axis2",
choices=names(dat),
selected = "tetramer no 1 APC")
})
observe({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
updateSelectInput(
session,
"group_complex_dot",
choices=names(dat),
selected = "AJBJ")
})
cols.FACS.index <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
col.gg <- gg_fill_hue(dim(num)[1])
unique.col <- as.data.frame(unique(dat[grep(input$group_complex_dot,names(dat))]))
if (input$FACS.index_colour.choise == "default") {
lapply(1:dim(num)[1], function(i) {
colourInput(paste("col.FACS.index", i, sep="_"), paste(num[i,]), col.gg[i])
})
}
else if (input$FACS.index_colour.choise == "random") {
palette1 <- distinctColorPalette(dim(unique.col)[1])
lapply(1:dim(num)[1], function(i) {
colourInput(paste("col.FACS.index", i, sep="_"), paste(num[i,]), palette1[i])
})
}
else {
lapply(1:dim(num)[1], function(i) {
colourInput(paste("col.FACS.index", i, sep="_"), paste(num[i,]), "grey")
})
}
})
shape.FACS.index <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
validate(
need(nrow(dat)>0,
"Upload file")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
numericInput(paste("shape.FACS.index", i, sep="_"), paste(num[i,]), 19)
})
})
size.FACS.index <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
validate(
need(nrow(dat)>0,
"Upload file")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
numericInput(paste("size.FACS.index", i, sep="_"), paste(num[i,]), 3)
})
})
alpha.FACS.index <- reactive({
dat <- input.data_CSV2();
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
numericInput(paste("alpha.FACS.index", i, sep="_"), paste(num[i,]), 1)
})
})
output$myPanel.FACS.index.shape <- renderUI({shape.FACS.index()})
output$myPanel.FACS.index <- renderUI({cols.FACS.index()})
output$myPanel.FACS.index.size <- renderUI({size.FACS.index()})
colors.FACS.index <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
validate(
need(nrow(dat)>0,
"Upload file")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
input[[paste("col.FACS.index", i, sep="_")]]
})
})
shape.FACS.index2 <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
validate(
need(nrow(dat)>0,
"Upload file")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
input[[paste("shape.FACS.index", i, sep="_")]]
})
})
size.FACS.index2 <- reactive({
dat <- input.data_CSV2()
validate(
need(nrow(dat)>0,
"Upload file for dotplot")
)
names(dat) <- gsub("\\.", " ", names(dat))
validate(
need(nrow(dat)>0,
"Upload file")
)
dat <- as.data.frame(dat)
dat[is.na(dat)] <- "not_clonal"
num <- unique(dat[names(dat) %in% input$group_complex_dot])
lapply(1:dim(num)[1], function(i) {
input[[paste("size.FACS.index", i, sep="_")]]
})
})
dot_plot.complex <- reactive({
index <- input.data_CSV2();
validate(
need(nrow(index)>0,
"Upload file")
)
names(index) <- gsub("\\.", " ", names(index))
index <- as.data.frame(index)
y_lable1 <- bquote(.(input$y.axis2))
x_lable1 <-  bquote(.(input$x.axis2))
index[is.na(index)] <- "not_clonal"
selected.col <- index[names(index) %in% input$group_complex_dot]
names(selected.col) <- "V1"
index[names(index) %in% input$group_complex_dot] <- factor(selected.col$V1, levels = unique(selected.col$V1),labels = unique(selected.col$V1))
palette.complex <- unlist(colors.FACS.index())
shape.ggplot <- unlist(shape.FACS.index2())
size.ggplot <- unlist(size.FACS.index2())
vals15$complex_dot <- ggplot(index, aes(x=get(input$x.axis2), y=get(input$y.axis2),
colour = get(input$group_complex_dot),
shape = get(input$group_complex_dot),
size  = get(input$group_complex_dot),
)
)+
geom_point() +
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
limits = c(input$min.x,10^input$max.x),
labels = trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
limits = c(input$min.y,10^input$max.y),
labels = trans_format("log10", math_format(10^.x))) +
theme_bw() +
scale_color_manual(values=palette.complex) +
scale_shape_manual(values=shape.ggplot)+
scale_size_manual(values=size.ggplot)+
geom_hline(yintercept = input$yintercept,colour=input$intercept.col,linetype=input$int.type)+
geom_vline(xintercept = input$xintercept,colour=input$intercept.col, linetype=input$int.type)+
annotation_logticks()  +
theme(text=element_text(size=20,family=input$font_type2),
axis.text.x = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type2),
axis.text.y = element_text(colour="black",size=input$axis.numeric.size,angle=0,hjust=1,vjust=0,face="plain",family=input$font_type2),
axis.title.x=element_text(colour="black",size=input$axis.title.size,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type2),
axis.title.y = element_text(colour="black",size=input$axis.title.size,angle=90,hjust=.5,vjust=.5,face="plain",family=input$font_type2),
legend.title  =element_blank(),
legend.position = input$legend.dot,
legend.text = element_text(colour="black",size=input$legend.size.cd,hjust=.5,vjust=.5,face="plain",family=input$font_type2)) +
scale_alpha(guide = 'none') +
guides(size=FALSE, col = guide_legend(ncol=input$legend.column,override.aes = list(size=input$leg.dot.size)))+
labs(x=x_lable1,
y=y_lable1)
vals15$complex_dot
})
dot_plot.complex1 <- function () {
if (input$density_dotplot =="no" & input$grid.lines.dot =='no') {
dot_plot.complex() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
}
else if (input$density_dotplot =="no" & input$grid.lines.dot =='yes') {
dot_plot.complex()
}
else if (input$density_dotplot =="yes" & input$grid.lines.dot =='no') {
dot_plot <- dot_plot.complex() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggExtra::ggMarginal(dot_plot,groupColour = TRUE, groupFill = TRUE)
}
else {
ggExtra::ggMarginal(dot_plot.complex(),groupColour = TRUE, groupFill = TRUE)
}
}
output$dot_plot.complex2 <- renderPlot({
withProgress(message = 'Figure is being generated...',
detail = '', value = 0, {
test_fun()
})
dot_plot.complex1()
})
output$downloadPlot_complex.dotplot <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste(input$name.colour3,"complex.dotplot_",gsub("/", "-", x), ".pdf", sep = "")
}, content = function(file) {
pdf(file, width=input$width_complex.dotplot,height=input$height_complex.dotplot, onefile = FALSE) # open the pdf device
print(dot_plot.complex1())
dev.off()},
contentType = "application/pdf" )
output$downloadPlotPNG_complex.dotplot <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste(input$name.colour3,"complex.dotplot_", gsub("/", "-", x), ".png", sep = "")
},
content = function(file) {
png(file, width = input$width_png_complex.dotplot, height = input$height_png_complex.dotplot, res = input$resolution_PNG_complex.dotplot)
print(dot_plot.complex1())
dev.off()}, contentType = "application/png" # MIME type of the image
)
# upset diagram -----
vals23 <- reactiveValues(upset.plot=NULL)
observe({
updateSelectInput(
session,
"upset.select",
choices=names(input.data2()),
selected = "AJBJ")
})
observe({
updateSelectInput(
session,
"upset.group.select",
choices=names(select_group()),
selected = "group")
})
observe({
updateSelectInput(
session,
"order.of.group",
choices=select_group(),
selected = c("CD8","IFN"))
})
upset.parameters <- function () {
df <- input.data2();
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
head(df)
unique.df <- unique(df[c(input$upset.select,input$upset.group.select)])
names(unique.df) <- c("chain","group")
unique.df$cloneCount <- 1
mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
# a <- as.data.frame(unique(names(mat)))
#   a$V1 <- distinctColorPalette(dim(a)[1])
df.x <- make_comb_mat(mat)
ht = draw(UpSet(df.x,
row_names_gp =  gpar(fontfamily = 'serif', fontsize = input$upset.text.size),
column_names_gp = gpar(fontfamily = 'serif'),
top_annotation = upset_top_annotation(df.x,
annotation_name_gp = gpar(fontfamily = 'serif')
),
right_annotation = upset_right_annotation(df.x,
annotation_name_gp = gpar(fontfamily = 'serif')),
set_order  = c(input$order.of.group)
), padding = unit(c(20, 20, 20, 20), "mm"))
od = column_order(ht)
cs = comb_size(df.x)
decorate_annotation("intersection_size", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = input$upset.font.size, fontfamily = 'serif')
) })
}
output$UpSet.plot <- renderPlot({
withProgress(message = 'Figure is being generated...',
detail = '', value = 0, {
test_fun()
})
upset.parameters()
})
upset.datatable1 <- reactive({
df <- input.data2();
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
head(df)
unique.df <- unique(df[c(input$upset.select,input$upset.group.select)])
names(unique.df) <- c("chain","group")
unique.df$cloneCount <- 1
mat <- acast(unique.df, chain~group, value.var="cloneCount")
mat[is.na(mat)] <- 0
mat <- as.data.frame(mat)
mat
})
output$upset.datatable <- DT::renderDataTable( {
datatable(upset.datatable1(), extensions = "Buttons", options = list(searching = TRUE,
ordering = TRUE,
buttons = c('copy','csv', 'excel'),
dom = 'Bfrtip',
pageLength=2,
lengthMenu=c(2,5,10,20,50,100),
scrollX = TRUE
))
}, server = FALSE)
output$downloadPlot_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_",gsub("/", "-", x), ".pdf", sep = "")
}, content = function(file) {
pdf(file, width=input$width_upset,height=input$height_upset, onefile = FALSE) # open the pdf device
print(upset.parameters())
dev.off()}, contentType = "application/pdf" )
output$downloadPlotPNG_upset <- downloadHandler(
filename = function() {
x <- gsub(":", ".", Sys.time())
paste("upset_", gsub("/", "-", x), ".png", sep = "")
},
content = function(file) {
png(file, width = input$width_png_upset, height = input$height_png_upset, res = input$resolution_PNG_upset)
print(upset.parameters())
dev.off()}, contentType = "application/png" # MIME type of the image
)
}
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
df <- as.data.frame(dat)
runApp('TCR_Explore_v1.0.R')
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
df <- as.data.frame(dat)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
head(df1)
df1$len1 <- nchar(df1[,grep("JUNCTION..AA._A",names(df1))])
df1$chain <- df1[,names(df1) %in% input$chain.hist.col]
df1
head(df1)
df1$chain <- df1[,names(df1) %in% "AV"]
df1 <- df1[order(df1$chain, decreasing = F),]
df1$chain <- factor(df1$chain,levels = unique(df1$chain))
ddply(df, "len1",numcolwise(sum))
ddply(df, "len1",numcolwise(sum))
ddply(df1, "len1",numcolwise(sum))
names(df1)
ddply(df1, c("Indiv.group","len1"),numcolwise(sum))
ddply(df1, c("group","len1"),numcolwise(sum))
max.1 <- ddply(df1, c("group","len1"),numcolwise(sum))
max(max.1$cloneCount)
runApp('TCR_Explore_v1.0.R')
dat <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
df <- as.data.frame(dat)
df.names <-  df[ , -which(names(df) %in% c("cloneCount","clone"))]
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep("JUNCTION..AA._A",names(df1))])
head(df1)
df1$chain <- df1[,names(df1) %in% "AV"]
df1 <- df1[order(df1$chain, decreasing = F),]
df1$chain <- factor(df1$chain,levels = unique(df1$chain))
df.col.2 <- as.data.frame(hist.col.table())
df1 <- ddply(df,names(df.names) ,numcolwise(sum))
df1$len1 <- nchar(df1[,grep("JUNCTION..AA._A",names(df1))])
head(df1)
df1$chain <- df1[,names(df1) %in% "AV"]
df1 <- df1[order(df1$chain, decreasing = F),]
df1$chain <- factor(df1$chain,levels = unique(df1$chain))
max.1 <- ddply(df1, c("group","len1"),numcolwise(sum))
head(df1)
df1$unique <- 1
max.1 <- ddply(df1, c("group","len1"),numcolwise(sum))
max.1
runApp('TCR_Explore_v1.0.R')
max.1
max.1$feq <- sum(max.1)/max.1$unique
max.1$unique/sum(max.1)
max.1$unique/sum(max.1$unique)
runApp('TCR_Explore_v1.0.R')
num <- as.data.frame(unique(df1[names(df1) %in% "group"]))
num
runApp('TCR_Explore_v1.0.R')
num
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
df1 <- read.csv("~/Desktop/TCR_Explore data/")
df1 <- read.csv("~/Desktop/TCR_Explore data/CU006 OXP/CU006OXP QC.csv")
head(df1)
names(df1)
df1 <- as.data.frame(df1)
df <- subset(df1,df1$clone_quality=="pass")
df <- as.data.frame(df)
df2 <- df[!names(df) %in% c("V.sequence.quality.check","clone_quality","comments","JUNCTION..with.frameshift.","CDR3.IMGT..with.frameshift.","JUNCTION..AA...with.frameshift.","Sequence.number","V.REGION.identity..","J.REGION.identity..")]
head(df2)
df1 <- read.csv("~/Desktop/TCR_Explore data/CU006 OXP/CU006OXP QC.csv")
df1 <- as.data.frame(df1)
df <- subset(df1,df1$clone_quality=="pass")
df <- as.data.frame(df)
df2 <- df[!names(df) %in% c("V.sequence.quality.check","clone_quality","comments","JUNCTION..with.frameshift.","CDR3.IMGT..with.frameshift.","JUNCTION..AA...with.frameshift.","Sequence.number","V.REGION.identity..","J.REGION.identity..")]
head(df2)
df1 <- read.csv("~/Desktop/TCR_Explore data/CU006 OXP/CU006OXP QC.csv")
df1 <- as.data.frame(df1)
df <- subset(df1,df1$clone_quality=="pass")
df <- as.data.frame(df)
df2 <- df[!names(df) %in% c("V.sequence.quality.check","clone_quality","comments","JUNCTION..with.frameshift.","CDR3.IMGT..with.frameshift.","JUNCTION..AA...with.frameshift.","Sequence.number","V.REGION.identity..","J.REGION.identity..")]
head(df2)
df.Vgene <- as.data.frame(do.call(rbind, strsplit(as.character(df2$V.GENE.and.allele), ",")))
df2$V.GENE <- df.Vgene$V1
y = dim(df2)[2]
y
head(df.Vgene)
df.Vgene <- as.data.frame(do.call(rbind, strsplit(as.character(df2$V.GENE.and.allele), ",")))
head(df.Vgene)
df2$V.GENE <- df.Vgene$V1
y = dim(df2)[2]
y
df2$V.GENE <- gsub(" ","",df2$V.GENE)
df2$cloneCount <- 1
df_name2 <- as.data.frame(do.call(rbind, strsplit(as.character(df2$Sequence.ID), "_")))
df_name3 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name2$V1), ".-")))
df_name5 <- as.data.frame(do.call(rbind, strsplit(as.character(df_name3$V1), "[.]")))
df2$ID <- df_name2$V1
head(df2)
df2$Indiv.group <- df_name3$V1
df2$Indiv <-df_name5$V1
df2$group <- df_name5$V2
df2$clone <- df_name3$V2
chain1 <- df2[grep("A",df2$V.GENE),]
chain2 <- df2[grep("B",df2$V.GENE),]
# paste chain into name
chain1$ID <- gsub("A-","-",chain1$ID)
names(chain1)[1:y] <- paste(names(chain1)[1:y],"A",sep="_")
head(chain1)
chain2$ID <- gsub("B-","-",chain2$ID)
names(chain2)[1:y] <- paste(names(chain2)[1:y],"B",sep="_")
z = y+1
x <- names(chain2)[z:dim(chain2)[2]]
merged_chain <- merge(chain1,chain2,by =x)
head(merged_chain)
head(merged_chain)
merged_chain2 <- merged_chain[ , -which(names(merged_chain) %in% c("ID","Sequence.ID_A","Sequence.ID_B","V.DOMAIN.Functionality_A","V.DOMAIN.Functionality_B","D.GENE.and.allele_A","JUNCTION.frame_A","JUNCTION.frame_B"))]
names(merged_chain2)
dat <- merged_chain2
dat$AV <- paste(dat$V.GENE_A)
head(dat)
dat$AJ <- paste(dat$J.GENE.and.allele_A,sep="")
merged_chain <- merge(chain1,chain2,by =x)
head(merged_chain)
merged_chain2 <- merged_chain[ , -which(names(merged_chain) %in% c("ID","Sequence.ID_A","Sequence.ID_B","V.DOMAIN.Functionality_A","V.DOMAIN.Functionality_B","D.GENE.and.allele_A","JUNCTION.frame_A","JUNCTION.frame_B"))]
names(merged_chain2)
dat <- merged_chain2
dat$AV <- paste(dat$V.GENE_A)
dat$AJ <- paste(dat$J.GENE.and.allele_A,sep="")
dat$AVJ <- paste(dat$V.GENE_A,".",dat$J.GENE.and.allele_A,sep="")
dat$AV <- gsub("[*]0.","",dat$AV)
dat$AJ <- gsub("[*]0.","",dat$AJ)
dat$AVJ <- gsub("[*]0.","",dat$AVJ)
dat$BV <- paste(dat$V.GENE_B)
dat$BJ <- paste(dat$J.GENE.and.allele_B)
dat$BD <- paste(dat$D.GENE.and.allele_B)
dat$BVDJ <- paste(dat$V.GENE_B,".",dat$D.GENE.and.allele_B,".",dat$J.GENE.and.allele_B,sep="")
dat$BV <- gsub("[*]0.","",dat$BV)
dat$BJ <- gsub("[*]0.","",dat$BJ)
dat$BD <- gsub("[*]0.","",dat$BD)
dat$BVDJ <- gsub("[*]0.","",dat$BVDJ)
dat$AJ <- gsub("TR","",dat$AJ)
dat$AVJ <- gsub("TR","",dat$AJ)
dat$AVJ.BVDJ <- paste(dat$AVJ,"_",dat$BVDJ,sep="")
runApp('TCR_Explore_v1.0.R')
