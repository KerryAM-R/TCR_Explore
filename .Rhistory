axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dataframe = read_xls("Raw_data/vquest-2.xls",sheet = 2)
View(dataframe)
runApp('TCR_Explore_v1.0.R')
df1 = read_xls("Raw_data/vquest-2.xls",sheet = 1)
df2 <- read_xls("Raw_data/vquest-2.xls",sheet = 2)
df3 <- df1[names(df1) %in% c("Sequence number","Sequence ID","V-DOMAIN Functionality", "V-GENE and allele","V-REGION identity %","J-GENE and allele","J-REGION identity %","D-GENE and allele","JUNCTION frame","JUNCTION (with frameshift)","CDR3-IMGT (with frameshift)","Sequence")]
df4 <- df2[names(df2) %in% c("Sequence number","Sequence ID","JUNCTION","JUNCTION (AA)","JUNCTION (with frameshift)","JUNCTION (AA) (with frameshift)","CDR3-IMGT","CDR3-IMGT (AA)","V-REGION")]
df_chain1 <- merge(df3,df4,by=c("Sequence number","Sequence ID"))
df_chain1 <- as.data.frame(df_chain1)
df_chain1$`J-GENE and allele` <- gsub('Homsap ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Homsap ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Homsap ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('Musmus ','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('Musmus ','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('Musmus ','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('see comment','',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('see comment','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('see comment','',df_chain1$`D-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[(]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('[)]','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub(' F','',df_chain1$`D-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[(]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[)]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F,','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[[]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('[]]','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('F','',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' or ',', ',df_chain1$`V-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub(' ','',df_chain1$`V-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' F','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub('TR','',df_chain1$`J-GENE and allele`)
df_chain1$`J-GENE and allele` <- gsub(' or ',', ',df_chain1$`J-GENE and allele`)
df_chain1$`V-GENE and allele` <- gsub('TR','',df_chain1$`V-GENE and allele`)
df_chain1$`D-GENE and allele` <- gsub('TR','',df_chain1$`D-GENE and allele`)
df_chain1$`V-DOMAIN Functionality` <- gsub(' (see comment)','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$JUNCTION <- toupper(df_chain1$JUNCTION)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT")))
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive", "Unproductive issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT")))
runApp('TCR_Explore_v1.0.R')
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub(' (see comment)','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub('(see comment)','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(see comment)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(]see comment[)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub(' [(]see comment','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$`V-DOMAIN Functionality` <- gsub('[)]','',df_chain1$`V-DOMAIN Functionality`)
df_chain1$`V-DOMAIN Functionality`
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive", "Unproductive issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT")))
df_chain1$V.sequence.quality.check
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT")))
df_chain1$clone_quality <- NA
df_chain1$V.sequence.quality.check
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No result", "Unproductive issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT"))))
df_chain1$V.sequence.quality.check
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No result", "Unproductive issue",
ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT"))))
df_chain1$V.sequence.quality.check
View(df_chain1)
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="Unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT"))))
df_chain1$V.sequence.quality.check
df_chain1$V.sequence.quality.check <- ifelse(df_chain1$`V-DOMAIN Functionality`=="unproductive", "Unproductive issue",
ifelse(df_chain1$`V-DOMAIN Functionality`=="No results", "No alignment",
ifelse(df_chain1$`V-REGION identity %`<=90,"V Identity issue",
ifelse(df_chain1$`J-REGION identity %`<=90,"J Identity issue","No issue flagged by IMGT"))))
df_chain1$V.sequence.quality.check
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
dataframe = read_xls("test-data/QC/Vquest_data/CD8_E10630_A.xls",sheet = 2)
dataframe = read_excel("test-data/QC/Vquest_data/CD8_E10630_A.xls")
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
tail(diffLogoObj$letters$x)
scale_fill_brewer("Amino-acids properties",palette="Paired") +
geom_hline(yintercept=0)+
theme_bw()+
theme(legend.position = "bottom",
panel.grid  = element_blank(),
)+
guides(color = "none", size = "none")+
ylab("Shannon information in bits")
dataframe = read.csv("~/Desktop/TCR_Explore data_KM220413/All data/All paired TCR_130422_KM.csv")
dataframe <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
head(dataframe)
df.names <-  dataframe[ , -which(names(dataframe) %in% c("cloneCount","clone","Sequence_A","Sequence_B"))]
df1 <- ddply(dataframe,names(df.names) ,numcolwise(sum))
df1
df1 <- df1[order(df1$cloneCount, decreasing = T),]
names(df1)
df.group <- unique(df1[names(df1) %in% "Indiv.group"])
names(df.group) <- "V1"
column.length <- length(df.group$V1)
column.length
df.group2 <- unique(df1[names(df1) %in% "AVJ_aCDR3_BVDJ_bCDR3"]) #"AVJ_aCDR3_BVJ_bCDR3"
df.group2
names(df.group2) <- "V1"
row.length <- length(df.group2$V1)
row.length
m = matrix(NA,ncol=column.length, nrow=row.length)
samps <- df.group$V1
samps
for (j in 1:column.length){
df2 <- subset(df1,df1$Indiv.group==samps[j])
m[,j] <- c(df2$cloneCount, rep(NA, row.length - length(df2$cloneCount)))
}
m <- as.data.frame(m)
names(m) <- samps
head(m)
m
a <- matrix(nrow=1,ncol=dim(m)[2])
b <- matrix(nrow=1,ncol=dim(m)[2])
d <- matrix(nrow=1,ncol=dim(m)[2])
for( i in 1:dim(m)[2]) {
samp <- m[,i]
samp <- na.omit(samp)
a[,i] <- diversity(samp,"invsimpson")
b[,i] <- sum(samp)
d[,i] <- nrow(as.data.frame(samp))
}
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1 <- rbind(a,b,d)
a1 <- as.data.frame(a1)
names(a1) <- names(m)
a1
df_name <- as.data.frame(do.call(rbind, strsplit(as.character(names(m)), "\\.")))
head(df_name)
a2 <- as.data.frame(t(a1))
names(a2) <- c("inv.simpson.index","total # clones","unique # clones")
a2
both <- cbind(a2,df_name)
both$Indiv_group <- paste(both$V1,both$V2,sep = "_")
as.data.frame(both)
# motif -----
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
names(df)
df_unique <- as.data.frame(ddply(df,(c("group","JUNCTION..AA._B")),numcolwise(sum)))
df_unique$len1 <- nchar(df_unique[,names(df_unique) %in%"JUNCTION..AA._B"])
unique(df_unique$len1)
subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="CD8")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif
motif_count1_aa <- motif
# df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif_count2_aa <- motif
motif_count2_aa
diffLogoObj = createDiffLogoObject(pwm1 = as.data.frame(motif_count1_aa@mat),
pwm2 = as.data.frame(motif_count2_aa@mat),
alphabet = ASN
)
tail(diffLogoObj$letters$x)
diffLogo(diffLogoObj, diffLogoConfiguration = list(showSequenceLogosTop=T))
df_subset <- subset(df_unique,df_unique$len1==15)
mat <- (motif_count1_aa@mat - motif_count2_aa@mat)
names(mat) <- 1:dim(mat)[2]
mat
df_subset <- subset(df_subset,df_subset$group=="IFN")
x <- pcm2pfm(motif_count1_aa@mat)
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
ggseqlogo(mat, method='custom', seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family=input$font_type),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family=input$font_type),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family=input$font_type),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif")) +
motif_count<-pcm2pfm(motif_count)
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
x <- createDiffLogoObject(as.data.frame(motif_count1_aa@mat), as.data.frame(motif_count2_aa@mat),
alphabet = ASN, baseDistribution = differenceOfICs,
)
mat <- (motif_count1_aa@mat - motif_count2_aa@mat)
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')
mat <- (motif_count1_aa@mat - motif_count2_aa@mat)
mat
# motif -----
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
names(df)
df_unique <- as.data.frame(ddply(df,(c("group","JUNCTION..AA._B")),numcolwise(sum)))
df_unique$len1 <- nchar(df_unique[,names(df_unique) %in%"JUNCTION..AA._B"])
unique(df_unique$len1)
subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="CD8")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif
motif_count1_aa <- motif
# df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
# df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
# df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif_count2_aa <- motif
motif_count2_aa
mat <- (motif_count1_aa@mat - motif_count2_aa@mat)
names(mat) <- 1:dim(mat)[2]
mat
df_subset <- subset(df_subset,df_subset$group=="IFN")
x <- pcm2pfm(motif_count1_aa@mat)
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
warnings()
mat
x <- createDiffLogoObject(as.data.frame(motif_count1_aa@mat), as.data.frame(motif_count2_aa@mat),
alphabet = ASN, baseDistribution = differenceOfICs,
)
mat <- (motif_count1_aa@mat - motif_count2_aa@mat)
mat <- (x$pwm1 - x$pwm2)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
mat
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa') +
ylab('JS diversity')+
geom_hline(yintercept=0) +
geom_vline(xintercept=0) +
annotate(geom="text",x=1,y=Inf,vjust=2,label="IFN",size=10,face="plain",family="serif")+
annotate(geom="text",x=1,y=-Inf,vjust=-2,label="CD8",size=10,face="plain",family="serif")+
theme(
axis.text.x = element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.text.y = element_text(colour="black",size=20,angle=0,hjust=1,vjust=0,face="plain",family="serif"),
axis.title.x=element_text(colour="black",size=20,angle=0,hjust=.5,vjust=.5,face="plain",family="serif"),
axis.title.y = element_text(colour="black",size=20,angle=90,hjust=.5,vjust=.5,face="plain",family="serif"),
legend.title  =element_blank(),
legend.position = "bottom",
legend.text = element_text(colour="black", size=8,family="serif"),
)
ggseqlogo(mat, seq_type='aa')
require(ggseqlogo)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa')
warnings()
# motif -----
df <- read.csv("test-data/Group/paired_unsummarised2021.09.22.csv")
validate(
need(nrow(df)>0,
error_message_val1)
)
df <- as.data.frame(df)
names(df)
df_unique <- as.data.frame(ddply(df,(c("group","JUNCTION..AA._B")),numcolwise(sum)))
df_unique$len1 <- nchar(df_unique[,names(df_unique) %in%"JUNCTION..AA._B"])
unique(df_unique$len1)
subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="CD8")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif
motif_count1_aa <- motif
df_subset <- subset(df_unique,df_unique$len1==15)
df_subset <- subset(df_subset,df_subset$group=="IFN")
motif <- as.data.frame(t(as.data.frame(strsplit(df_subset[,grep("JUNCTION..AA._B",names(df_subset))], ""))))
motif
cbind(x=1,y=2,motif)
motif_count <- aa.count.function(cbind(x=1,y=2,motif), 15)
motif_count<-pcm2pfm(motif_count)
motif_count
motif<-new("pfm", mat=motif_count, name="",
color=colorset(alphabet="AA",
colorScheme="chemistry"))
motif_count2_aa <- motif
motif_count2_aa
diffLogoObj = createDiffLogoObject(pwm1 = as.data.frame(motif_count1_aa@mat),
pwm2 = as.data.frame(motif_count2_aa@mat),
alphabet = ASN
)
tail(diffLogoObj$letters$x)
diffLogo(diffLogoObj, diffLogoConfiguration = list(showSequenceLogosTop=T))
df_subset <- subset(df_unique,df_unique$len1==15)
x <- createDiffLogoObject(as.data.frame(motif_count1_aa@mat), as.data.frame(motif_count2_aa@mat),
alphabet = ASN, baseDistribution = differenceOfICs,
)
mat <- (x$pwm1 - x$pwm2)
require(ggseqlogo)
names(mat) <- 1:dim(mat)[2]
mat
ggseqlogo(mat, seq_type='aa')
library(shiny); runApp('TCR_Explore_v1.0.R')
runApp('TCR_Explore_v1.0.R')
library(shiny); runApp('TCR_Explore_v1.0.R')
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
head(df1)
head(df2)
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
head(df)
df <- merge(df1,df2,by.x="ID",by.y = "name")
View(df2)
duplicated(df2$name)
df2[duplicated(df2$name),]
dim(df2[duplicated(df2$name),])
dim(df2[unique(df2$name),])
df2 <- df2[unique(df2$name),]
names(df2)
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias")
names(df2)
df1 <- read.csv("~/Desktop/Volcano_Plot_headers_V2.csv")
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
duplicated(df2$name)
df2 <- df2[unique(df2$name),]
names(df2)
head(names(df2))
head(df2)
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
df2[unique(df2$name),]
df2 <- df2[!duplicated(df2$name),]
df2 <- read.csv("~/Desktop/gProfiler_hsapiens_30-05-2022_7-51-42 pm.csv")
df2.u <- df2[!duplicated(df2$name),]
df <- merge(df1,df2,by.x="ID",by.y = "initial_alias",all.x=T)
head(df)
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
head(df)
df4 <- df[c(5,2,3)]
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias")
df4 <- df[c(5,2,3)]
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
df4 <- df[c(5,2,3)]
head(df4)
df <- merge(df1,df2.u,by.x="ID",by.y = "initial_alias",all.x=T)
write.csv(df,"converted.ID.csv")
head(df4)
names(df4)[1] <- "ID"
head(df4)
write.csv(df4,"~/Desktop/Converted.to.gene.names.csv")
write.csv(df,"~/Desktop/converted.ID.csv")
